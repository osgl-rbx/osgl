"use strict";(self.webpackChunkreact_test=self.webpackChunkreact_test||[]).push([[989],{282:()=>{},2355:()=>{},2987:(e,a,n)=>{n.d(a,{A:()=>r});var s=n(5043),o=n(579);const r=e=>{let{sections:a}=e;const[n,r]=(0,s.useState)({}),[i,c]=(0,s.useState)({}),[l,t]=(0,s.useState)(window.location.pathname);(0,s.useEffect)((()=>{const e=()=>{t(window.location.pathname)};return window.addEventListener("popstate",e),()=>window.removeEventListener("popstate",e)}),[]);return(0,o.jsx)("div",{className:"sidebar",children:a.map(((e,a)=>{const s=l.startsWith(`/${e.id}`);return(0,o.jsxs)("div",{className:"sidebar-section",children:[(0,o.jsxs)("div",{className:"section-header",onClick:()=>(e=>{n[e]?(c((a=>({...a,[e]:"fade-out"}))),setTimeout((()=>{r((a=>({...a,[e]:!1}))),c((a=>({...a,[e]:""})))}),300)):(r((a=>({...a,[e]:!0}))),c((a=>({...a,[e]:"fade-in"}))))})(e.title),children:[(0,o.jsx)("span",{style:{color:s?"#446EE4":"white"},children:e.title}),(0,o.jsx)("span",{className:"toggle-icon",style:{transform:n[e.title]?"rotate(90deg)":"rotate(0deg)"},children:"\u25ba"})]}),n[e.title]&&(0,o.jsx)("div",{className:`sub-sections ${i[e.title]}`,children:e.links.map(((e,a)=>{const n=l===e.href;return(0,o.jsx)("a",{href:e.href,className:"sub-section-link",style:{animationDelay:.1*a+"s",color:n?"#446EE4":"#c2c7d6"},children:e.text},a)}))})]},a)}))})}},4221:(e,a,n)=>{n.d(a,{A:()=>i});var s=n(5043),o=n(7709),r=(n(8806),n(9006),n(579));const i=e=>{let{code:a,language:i="lua",filename:c}=e;(0,s.useEffect)((()=>{o.A.registerLanguage("lua",n(6092))}),[]);const[l,t]=(0,s.useState)(!1),d=(0,s.useRef)(null);(0,s.useEffect)((()=>{d.current&&o.A.highlightElement(d.current)}),[a]);return(0,r.jsxs)("div",{className:"code-block-container",children:[c&&(0,r.jsx)("div",{className:"filename",children:(0,r.jsx)("p",{className:"doc-paragraph",children:c})}),(0,r.jsx)("pre",{className:"code-block",children:(0,r.jsx)("code",{ref:d,className:`language-${i}`,children:a})}),(0,r.jsx)("button",{className:"copy-btn "+(l?"copied":""),onClick:()=>{navigator.clipboard.writeText(a).then((()=>{t(!0),setTimeout((()=>t(!1)),1500)})).catch((e=>console.error("Copy failed:",e)))},children:l?"Copied!":"Copy"})]})}},4533:(e,a,n)=>{n.d(a,{A:()=>r});var s=n(5043),o=n(579);const r=e=>{let{src:a,alt:n="Image",className:r=""}=e;const[i,c]=(0,s.useState)(!1),[l,t]=(0,s.useState)(!1);(0,s.useEffect)((()=>{i?setTimeout((()=>t(!0)),10):t(!1)}),[i]),(0,s.useEffect)((()=>{const e=e=>{"Escape"===e.key&&d()};return document.addEventListener("keydown",e),()=>document.removeEventListener("keydown",e)}),[]);const d=()=>{t(!1),setTimeout((()=>c(!1)),300)};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("img",{src:"/osgl"+a,alt:n,className:`image-thumbnail ${r}`,onClick:()=>c(!0)}),i&&(0,o.jsx)("div",{className:"image-overlay "+(l?"visible":""),onClick:d,children:(0,o.jsxs)("div",{className:"image-container "+(l?"visible":""),onClick:e=>e.stopPropagation(),children:[(0,o.jsx)("button",{className:"close-button",onClick:d,children:"\u2715"}),(0,o.jsx)("img",{src:"/osgl"+a,alt:n,className:"enlarged-image"})]})})]})}},5762:()=>{},6562:()=>{},8174:(e,a,n)=>{n.d(a,{A:()=>i});n(5043);var s=n(6214),o=n(5351),r=n(579);const i=()=>(0,r.jsxs)("div",{className:"topbar",style:{height:"55px",position:"fixed"},children:[(0,r.jsx)(o.A,{name:"logo",link:"/osgl"}),(0,r.jsx)("div",{className:"docs-sig",children:(0,r.jsx)("img",{src:"/osgl/docs-colour.png",alt:"docs",className:"docs-img"})}),(0,r.jsx)("img",{src:"/osgl/logo-sep.png",alt:"Separator",className:"seperator-img",style:{marginLeft:"75px"}}),(0,r.jsx)(s.A,{name:"api",link:"/osgl/api"}),(0,r.jsx)(s.A,{name:"github",link:"https://github.com/osgl-rbx/osgl/"})]})},9006:()=>{},9393:(e,a,n)=>{n.r(a),n.d(a,{default:()=>d});n(5043),n(9006);var s=n(929),o=n(8174),r=n(4221),i=n(4533),c=n(2987),l=(n(5762),n(6562),n(282),n(3371)),t=(n(2355),n(579));const d=()=>(0,t.jsxs)("div",{className:"Docs",children:[(0,t.jsx)("title",{children:"Docs | OSGL"}),(0,t.jsx)(o.A,{}),(0,t.jsx)("div",{className:"sidebar-content",children:(0,t.jsx)(c.A,{sections:l.A})}),(0,t.jsxs)("div",{className:"doc-content",children:[(0,t.jsx)("h1",{className:"doc-header",children:"Opening a Window"}),(0,t.jsx)("h2",{className:"doc-header",children:"Creating a canvas"}),(0,t.jsx)("div",{className:"doc-header-line"}),(0,t.jsxs)("p",{className:"doc-paragraph",children:["In OSGL, a ",(0,t.jsx)("code",{children:"Window"})," is an ",(0,t.jsx)("code",{children:"EditableImage"}),". OSGL is wrapper around this ",(0,t.jsx)("code",{children:"EditableImage"})," that gives you an easy-to-use higher-level API that can still interact with the base ",(0,t.jsx)("code",{children:"EditableImage"}),"."]}),(0,t.jsxs)("p",{className:"doc-paragraph",children:["A ",(0,t.jsx)("code",{children:"Window"})," needs to be able to render its content on some sort of Image, so create an ",(0,t.jsx)("code",{children:"ImageLabel"})," within a ",(0,t.jsx)("code",{children:"ScreenGui"})," in ",(0,t.jsx)("code",{children:"StarterGui"}),", with its ",(0,t.jsx)("code",{children:"BackgroundTransparency"})," set to 0. Ensure that the ",(0,t.jsx)("code",{children:"ScreenGui"})," is named ",(0,t.jsx)("code",{children:"ScreenGui"})," and the ",(0,t.jsx)("code",{children:"ImageLabel"})," is named ",(0,t.jsx)("code",{children:"ImageLabel"}),". This ",(0,t.jsx)("code",{children:"ImageLabel"})," will act as your primary canvas for rendering graphics. Your ",(0,t.jsx)("code",{children:"StarterGui"})," hierarchy should look like this:"]}),(0,t.jsx)(r.A,{code:"> StarterGui\n    > ScreenGui\n        > ImageLabel"}),(0,t.jsxs)("p",{className:"doc-paragraph",children:["To get a better view of the ",(0,t.jsx)("code",{children:"ImageLabel"})," while in-game, you can place it in the center of the screen. This will help you see the rendered graphics more clearly instead of it being in a corner of the screen. Additionally, resizing the ",(0,t.jsx)("code",{children:"ImageLabel"})," to a larger size, such as 420x420, can help you see what's rendered more easily."]}),(0,t.jsxs)("p",{className:"doc-paragraph",children:[(0,t.jsx)(i.A,{src:"\\rendering-to-a-window\\blankcanvas.png"}),(0,t.jsx)("br",{}),(0,t.jsxs)("i",{className:"doc-paragraph",children:["In this image, the ",(0,t.jsx)("code",{children:"AnchorPoint"})," property is set to ",(0,t.jsx)("code",{children:".5, .5"}),", with the position being ",(0,t.jsx)("code",{children:".5, 0, .5, 0"}),", and the size being ",(0,t.jsx)("code",{children:"0, 420, 0, 420"}),"."]})]}),(0,t.jsxs)("div",{class:"note",children:[(0,t.jsx)("div",{class:"note-title",children:"NOTE"}),(0,t.jsxs)("div",{class:"note-body",children:["Lower resolutions cause blurred images! If you're rendering at a low resolution, or just want a pixelated look, set the",(0,t.jsx)("code",{children:"ResampleMode"})," property of your ",(0,t.jsx)("code",{children:"ImageLabel"})," to ",(0,t.jsx)("code",{children:"Pixelated"}),"!"]})]}),(0,t.jsx)("h2",{className:"doc-header",children:"Creating a Window"}),(0,t.jsxs)("p",{className:"doc-paragraph",children:["Now that we have a canvas to work with, we can start programming. Create a ",(0,t.jsx)("code",{children:"LocalScript"})," in a suitable location, such as ",(0,t.jsx)("code",{children:"StarterPlayer/StarterPlayerScripts"}),"."]}),(0,t.jsxs)("p",{className:"doc-paragraph",children:["The main OSGL module is divided into several sub-modules, each serving a different purpose. To create a ",(0,t.jsx)("code",{children:"Window"}),", we need the ",(0,t.jsx)("code",{children:"Window"})," sub-module. Let's import it:"]}),(0,t.jsx)(r.A,{code:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\n\nlocal OSGL = require(ReplicatedStorage.Packages.OSGL)\nlocal Window = OSGL.Window'}),(0,t.jsxs)("p",{className:"doc-paragraph",children:["The ",(0,t.jsx)("code",{children:"Window"})," module offers multiple ways to create a ",(0,t.jsx)("code",{children:"Window"}),". The following is an extract from the API:"]}),(0,t.jsxs)("ul",{children:[(0,t.jsxs)("p",{className:"doc-paragraph",children:[" - ",(0,t.jsx)("code",{children:"Window.from"}),": Creates an OSGL window by initializing a new ",(0,t.jsx)("code",{children:"EditableImage"})," instance at the specified location."]}),(0,t.jsxs)("p",{className:"doc-paragraph",children:[" - ",(0,t.jsx)("code",{children:"Window.new"}),": Creates an OSGL window from an existing ",(0,t.jsx)("code",{children:"EditableImage"}),"."]}),(0,t.jsxs)("p",{className:"doc-paragraph",children:[" - ",(0,t.jsx)("code",{children:"Window.fromAssetId"}),": Creates a window given an assetId."]}),(0,t.jsxs)("p",{className:"doc-paragraph",children:[" - ",(0,t.jsx)("code",{children:"Window.fromBuffer"}),": Creates a window given a buffer."]})]}),(0,t.jsxs)("p",{className:"doc-paragraph",children:["Among the available options, ",(0,t.jsx)("code",{children:"Window.from"})," is the most suitable for our needs. Since we do not have an existing ",(0,t.jsx)("code",{children:"EditableImage"}),", this method will create one at the specified location. The function requires an ",(0,t.jsx)("code",{children:"Image"}),", along with the dimensions of our ",(0,t.jsx)("code",{children:"Window"}),":"]}),(0,t.jsx)(r.A,{code:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Players = game:GetService("Players")\n\nlocal OSGL = require(ReplicatedStorage.Packages.OSGL)\nlocal Window = OSGL.Window\n\nlocal player = Players.LocalPlayer\nassert(player)\n\nlocal screenGui = player.PlayerGui:WaitForChild("ScreenGui")\nlocal imageLabel = screenGui.ImageLabel\n\n-- Create a Window with a size of 420x420. The size can be customized as needed,\n-- but it does not have to match the size of the ImageLabel. Note that Windows\n-- cannot exceed the maximum size of 1024x1024.\nlocal window = Window.new(imageLabel, 420, 420)'}),(0,t.jsx)("p",{className:"doc-paragraph",children:"It's a good idea to use constants instead of hardcoded width and height numbers because we could be referring to these values a couple of times in the future:"}),(0,t.jsx)(r.A,{code:"local WIDTH = 420\nlocal HEIGHT = 420\n\nlocal window = Window.new(imageLabel, WIDTH, HEIGHT)"}),(0,t.jsx)("p",{className:"doc-paragraph",children:"Your full code should now look something like this:"}),(0,t.jsx)(r.A,{code:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Players = game:GetService("Players")\n\nlocal OSGL = require(ReplicatedStorage.OSGL)\nlocal Window = OSGL.Window\n\nlocal player = Players.LocalPlayer\nassert(player)\n\n-- Dimensions\nlocal WIDTH = 420\nlocal HEIGHT = 420\n\nlocal screenGui = player.PlayerGui:WaitForChild("ScreenGui")\nlocal imageLabel = screenGui.ImageLabel\n\n-- Create the window\nlocal window = Window.new(imageLabel, WIDTH HEIGHT)'}),(0,t.jsx)("h2",{className:"doc-header",children:"Error Handling"}),(0,t.jsxs)("p",{className:"doc-paragraph",children:["OSGL uses a ",(0,t.jsx)("code",{children:"Result"})," pattern for operations that might fail. This helps catch issues early:"]}),(0,t.jsx)(r.A,{code:'-- ...\n\nlocal window = Window.new(imageLabel, WIDTH HEIGHT)\nif not window.isOk then\n    -- OSGL returns errors as Enums (OSGL.Enum).\n    -- This means that the error message will be a number.\n    -- You can see what these values mean in the API reference.\n    local errorMessage = window:UnwrapErr()\n    warn("Failed to create window:", errorMessage)\n    return\nend\n\n-- If we get here, the window is safe to use\nlocal myWindow = window:Unwrap()'}),(0,t.jsxs)("p",{className:"doc-paragraph",children:["With the new ",(0,t.jsx)("code",{children:"myWindow"})," object, all of the methods of a ",(0,t.jsx)("code",{children:"Window"})," can now be accessed. For now, clear the screen with a ",(0,t.jsx)("code",{children:"BLACK"})," color. Import OSGLs ",(0,t.jsx)("code",{children:"color"})," module, and use the ",(0,t.jsx)("code",{children:"Clear"})," method of ",(0,t.jsx)("code",{children:"Window"}),":"]}),(0,t.jsx)(r.A,{code:"-- ...\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\n-- ...\n\nlocal myWindow = window:Unwrap()\n\n-- Use the constant `BLACK`\nmyWindow:Clear(color.BLACK)"}),(0,t.jsxs)("p",{className:"doc-paragraph",children:["This isn't all; OSGL won't render your changes to the screen until you call either ",(0,t.jsx)("code",{children:"Render"})," or ",(0,t.jsx)("code",{children:"RenderTargetFPS"}),":"]}),(0,t.jsx)(r.A,{code:"-- ...\n\nlocal myWindow = window:Unwrap()\n\n-- Use the constant `BLACK`\nmyWindow:Clear(color.BLACK)\nmyWindow:Render()"}),(0,t.jsxs)("p",{className:"doc-paragraph",children:["Joining the game, you should now see that the entire ",(0,t.jsx)("code",{children:"Window"})," has been colored black (as it was cleared)! This means your code has worked. You can view the full code here for reference, or you can see the ",(0,t.jsx)("b",{className:"doc-paragraph",children:"01-BlackScreen"})," example:"]}),(0,t.jsx)(r.A,{code:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Players = game:GetService("Players")\n\nlocal OSGL = require(ReplicatedStorage.OSGL)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal player = Players.LocalPlayer\nassert(player)\n\n-- Dimensions\nlocal WIDTH = 420\nlocal HEIGHT = 420\n\nlocal screenGui = player.PlayerGui:WaitForChild("ScreenGui")\nlocal imageLabel = screenGui.ImageLabel\n\n-- Create the window\nlocal window = Window.new(imageLabel, WIDTH HEIGHT)\nif not window.isOk then\n    -- OSGL returns errors as Enums (OSGL.Enum).\n    -- This means that the error message will be a number.\n    -- You can see what these values mean in the API reference.\n    local errorMessage = window:UnwrapErr()\n    warn("Failed to create window:", errorMessage)\n    return\nend\n\n-- If we get here, the window is safe to use\nlocal myWindow = window:Unwrap()\n\n-- Use the constant `BLACK`\nmyWindow:Clear(color.BLACK)\nmyWindow:Render() -- Render our changes'}),(0,t.jsx)("p",{className:"doc-paragraph",children:(0,t.jsx)(i.A,{src:"\\rendering-to-a-window\\black-render.png"})}),(0,t.jsx)("div",{style:{height:"55px"}})]}),(0,t.jsx)(s.A,{}),(0,t.jsx)("div",{className:"grid-background-dark"})]})}}]);
//# sourceMappingURL=989.3e68a945.chunk.js.map