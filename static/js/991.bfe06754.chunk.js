"use strict";(self.webpackChunkosgl_docs=self.webpackChunkosgl_docs||[]).push([[991],{4721:(e,n,a)=>{a.d(n,{A:()=>d});var o=a(5043),r=a(2207),t=a(579);const i=e=>{let{name:n,definition:a}=e;const o=e=>e.split(/([&|])/).map(((e,n)=>{if("&"===e||"|"===e)return e;const a=e.match(/^\s*/)[0],o=e.match(/\s*$/)[0];return`${a}${(0,r.FD)(e.trim())}${o}`})).join("");let i="";if("string"===typeof a){const e=a.replace(/\?$/,""),r=a.endsWith("?");i=`type ${n} = ${o(e)}${r?"?":""};`}else if("object"===typeof a){i=`type ${n} = {\n${Object.entries(a).map((e=>{let[n,a]=e,r="",t="";return"string"===typeof a?r=o(a.replace(/\?$/,""))+(a.endsWith("?")?"?":""):"object"===typeof a&&a.type&&(r=o(a.type.replace(/\?$/,""))+(a.type.endsWith("?")?"?":""),t=a.comment?` -- ${a.comment}`:""),`    ${n}: ${r};${t}`})).join("\n")}\n}`}else i="/* Invalid Input */";return(0,t.jsx)("pre",{className:"output",dangerouslySetInnerHTML:{__html:(s=i,s.replace(/\b(type)\b/g,'<span class="keyword">$1</span>').replace(/(--.*)$/gm,'<span class="comment">$1</span>'))}});var s};var s=a(4221);const d=e=>{let{name:n,type:a,code:r}=e;const d=n.replace(/\s+/g,"-").toLowerCase();return(0,o.useEffect)((()=>{const e=()=>{if(window.location.hash===`#${d}`){const e=document.getElementById(d);e&&e.scrollIntoView({behavior:"smooth",block:"center"})}};return e(),window.addEventListener("hashchange",e),()=>{window.removeEventListener("hashchange",e)}}),[d]),(0,t.jsxs)("div",{children:[(0,t.jsx)("code",{id:d,className:"api-name-header",children:n}),(0,t.jsx)("br",{}),(0,t.jsx)(i,{name:n,definition:a}),r&&(0,t.jsx)("div",{className:"code-block",children:(0,t.jsx)(s.A,{code:r,language:"lua"})})]})}},8082:(e,n,a)=>{a.r(n),a.d(n,{default:()=>m});a(5043),a(3774);var o=a(929),r=a(9073),t=a(788),i=(a(5613),a(4721)),s=a(6724),d=a(6261),l=a(4176),c=a(2840),w=a(579);const m=()=>(0,w.jsxs)("div",{className:"API",children:[(0,w.jsx)("title",{children:"API | OSGL"}),(0,w.jsx)(r.A,{}),(0,w.jsx)("div",{className:"sidebar-content",children:(0,w.jsx)(t.A,{links:l.A})}),(0,w.jsxs)("div",{className:"api-content",children:[(0,w.jsx)("h1",{className:"api-header",children:"Window"}),(0,w.jsx)("div",{className:"api-header-line"}),(0,w.jsx)(c.A,{metadata:{inherits:["DrawableObject"],core:!0,partialThreadSafe:!0}}),(0,w.jsx)("p",{className:"api-paragraph",children:"The Window class handles the creation and rendering of Windows."}),(0,w.jsx)("h1",{className:"api-header",children:"Types"}),(0,w.jsx)("div",{className:"api-header-line"}),(0,w.jsx)(i.A,{name:"TextureBase",type:"Decal | Texture"}),(0,w.jsx)(i.A,{name:"ImageBase",type:"ImageLabel | ImageButton"}),(0,w.jsx)(i.A,{name:"Drawable",type:"TextureBase | ImageBase | MeshPart"}),(0,w.jsx)("h1",{className:"api-header",children:"Properties"}),(0,w.jsx)("div",{className:"api-header-line"}),(0,w.jsx)(s.A,{name:"surfaces",fullName:"Window.surfaces",type:"{Drawable}",desc:"All the instances the Window is currently rendering to."}),(0,w.jsx)(s.A,{name:"editableImage",fullName:"Window.editableImage",type:"EditableImage",desc:"The EditableImage the Window internally uses."}),(0,w.jsx)(s.A,{name:"targetFPS",fullName:"Window.targetFPS",type:"number",desc:"The rate that the Window will render at when the RenderTargetFPS method is called."}),(0,w.jsx)("h1",{className:"api-header",children:"Functions"}),(0,w.jsx)("div",{className:"api-header-line"}),(0,w.jsx)(d.A,{name:"new",fullName:"Window.new",params:{editableImage:"EditableImage",renderers:"{Drawable}"},returnType:"Result<Window, WindowError>",desc:"Creates a new Window object given an EditableImage.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal myWindow = Window.new(path.to.editableImage, {}):Unwrap()",metadata:{Checked:!0}}),(0,w.jsx)(d.A,{name:"from",fullName:"Window.from",params:{drawableObject:"Drawable",width:"number",height:"number"},returnType:"Result<Window, WindowError>",desc:"Creates a new Window object given a drawable instance.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal WIDTH = 50\nlocal HEIGHT = 50\n\nlocal imageLabel = path.to.imageLabel\nlocal myWindow = Window.from(imageLabel, WIDTH, HEIGHT):Unwrap()",metadata:{Checked:!0}}),(0,w.jsx)(d.A,{name:"fromAssetId",fullName:"Window.fromAssetId",params:{assetId:"string"},returnType:"Result<Window, WindowError>",desc:"Creates a new RGBA color value from RGB.",code:'local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal window = Window.fromAssetId("rbxassetid://ID"):Unwrap()',metadata:{Checked:!0}}),(0,w.jsx)(d.A,{name:"fromBuffer",fullName:"Window.fromBuffer",params:{buffer:"buffer",width:"number",height:"number"},returnType:"Result<Window, WindowError>",desc:"Creates a new Window object given a buffer.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal WIDTH = 50\nlocal HEIGHT = 50\n\nlocal bfr = buffer.create(WIDTH * HEIGHT * 4)\nlocal window = Window.fromBuffer(bfr, WIDTH, HEIGHT):Unwrap()",metadata:{Checked:!0}}),(0,w.jsx)(d.A,{name:"isDrawableInstance",fullName:"Window.isDrawableInstance",params:{object:"Instance"},returnType:"boolean",desc:"Checks if the given instance could be drawn onto a Window.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal instance = workspace.SpawnLocation\nlocal image = workspace.ImageLabel\n\nprint(Window.isDrawableInstance(instance)) -- false\nprint(Window.isDrawableInstance(image)) -- true",metadata:{Debug:!0,ThreadSafe:!0}}),(0,w.jsx)(d.A,{name:"getRenderingProperty",fullName:"Window.getRenderingProperty",params:{drawable:"Drawable"},returnType:"'ImageContent' | 'TextureContent' | ''",desc:"Given an Instance, returns the property that the EditableImage should render to.",code:'local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal texture = workspace.Texture\nlocal image = workspace.ImageLabel\n\nprint(Window.isDrawableInstance(texture)) -- "TextureContent"\nprint(Window.isDrawableInstance(image)) -- "ImageContent"',metadata:{Debug:!0,ThreadSafe:!0}}),(0,w.jsx)("h1",{className:"api-header",children:"Methods"}),(0,w.jsx)("div",{className:"api-header-line"}),(0,w.jsx)(d.A,{name:"Render",fullName:"Window:Render",params:{},returnType:"nil",desc:"Renders the Window's buffer to the screen.",code:'local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\n-- Create a window\nlocal window = Window.fromAssetId("rbxassetid://ID"):Unwrap()\n-- *Do drawing here*\n\nWindow:Render()',isMethod:!0}),(0,w.jsx)(d.A,{name:"RenderTargetFPS",fullName:"Window:RenderTargetFPS",params:{},returnType:"nil",desc:"Renders the Window's buffer to the screen at the rate of the Window's target FPS.",code:'local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\n-- Create a window\nlocal window = Window.fromAssetId("rbxassetid://ID"):Unwrap()\nwindow.targetFPS = 244\n-- *Do drawing here*\n\nwhile true do\n    -- Aim to render at 244fps\n    Window:RenderTargetFPS()\nend',isMethod:!0}),(0,w.jsx)(d.A,{name:"AddRenderers",fullName:"Window:AddRenderers",params:{renderers:"...Drawable"},returnType:"nil",desc:"Adds an additional list of objects to render the Window to.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\n-- Create a window\nlocal window = Window.from(path.to.image, WIDTH, HEIGHT):Unwrap()\nwindow:AddRenderers(workspace.ImageLabel, workspace.Texture)\n\nWindow:Render()",isMethod:!0}),(0,w.jsx)(d.A,{name:"RemoveRenderers",fullName:"Window:RemoveRenderers",params:{renderers:"...Drawable"},returnType:"nil",desc:"Removes a list of objects that the Window is currently rendering to.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\n-- Create a window\nlocal window = Window.from(path.to.image, WIDTH, HEIGHT):Unwrap()\nwindow:AddRenderers(workspace.ImageLabel, workspace.Texture)\n\nWindow:Render()\n\n-- Stop rendering to the ImageLabel\nwindow:RemoveRenderers(workspace.ImageLabel)",isMethod:!0}),(0,w.jsx)(d.A,{name:"GetRelativeMousePosition",fullName:"Window:GetRelativeMousePosition",params:{},returnType:"(boolean, number, number)",desc:"Returns whether the mouse is hovering over the Window, and if so what its X and Y positions are relative to the top-left corner.",code:'local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\n-- Create a window\nlocal window = Window.from(path.to.image, WIDTH, HEIGHT):Unwrap()\nwhile task.wait() do\n    local hovering, x, y = window:GetRelativeMousePosition(path.to.image)\n    if hovering then\n        print("Mouse is hovering over the window at (" .. x .. ", " .. y .. ")")\n    end\nend',isMethod:!0}),(0,w.jsx)(d.A,{name:"Destroy",fullName:"Window:Destroy",params:{},returnType:"nil",desc:"Destroys all information related to the Window, including the EditableImage itself.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\n-- Create a window\nlocal window = Window.from(path.to.image, WIDTH, HEIGHT):Unwrap()\n-- Do something with the Window\nwindow:Destroy() -- Free the window",isMethod:!0}),(0,w.jsx)("div",{style:{height:"55px"}})]}),(0,w.jsx)(o.A,{}),(0,w.jsx)("div",{className:"grid-background-dark"})]})}}]);
//# sourceMappingURL=991.bfe06754.chunk.js.map