"use strict";(self.webpackChunkosgl_docs=self.webpackChunkosgl_docs||[]).push([[444],{4721:(e,a,n)=>{n.d(a,{A:()=>i});var t=n(5043),s=n(2207),o=n(579);const l=e=>{let{name:a,definition:n}=e;const t=e=>e.split(/([&|])/).map(((e,a)=>{if("&"===e||"|"===e)return e;const n=e.match(/^\s*/)[0],t=e.match(/\s*$/)[0];return`${n}${(0,s.FD)(e.trim())}${t}`})).join("");let l="";if("string"===typeof n){const e=n.replace(/\?$/,""),s=n.endsWith("?");l=`type ${a} = ${t(e)}${s?"?":""};`}else if("object"===typeof n){l=`type ${a} = {\n${Object.entries(n).map((e=>{let[a,n]=e,s="",o="";return"string"===typeof n?s=t(n.replace(/\?$/,""))+(n.endsWith("?")?"?":""):"object"===typeof n&&n.type&&(s=t(n.type.replace(/\?$/,""))+(n.type.endsWith("?")?"?":""),o=n.comment?` -- ${n.comment}`:""),`    ${a}: ${s};${o}`})).join("\n")}\n}`}else l="/* Invalid Input */";return(0,o.jsx)("pre",{className:"output",dangerouslySetInnerHTML:{__html:(r=l,r.replace(/\b(type)\b/g,'<span class="keyword">$1</span>').replace(/(--.*)$/gm,'<span class="comment">$1</span>'))}});var r};var r=n(4221);const i=e=>{let{name:a,type:n,code:s}=e;const i=a.replace(/\s+/g,"-").toLowerCase();return(0,t.useEffect)((()=>{const e=()=>{if(window.location.hash===`#${i}`){const e=document.getElementById(i);e&&e.scrollIntoView({behavior:"smooth",block:"center"})}};return e(),window.addEventListener("hashchange",e),()=>{window.removeEventListener("hashchange",e)}}),[i]),(0,o.jsxs)("div",{children:[(0,o.jsx)("code",{id:i,className:"api-name-header",children:a}),(0,o.jsx)("br",{}),(0,o.jsx)(l,{name:a,definition:n}),s&&(0,o.jsx)("div",{className:"code-block",children:(0,o.jsx)(r.A,{code:s,language:"lua"})})]})}},8419:(e,a,n)=>{n.r(a),n.d(a,{default:()=>p});n(5043),n(3774);var t=n(929),s=n(9073),o=n(788),l=(n(5613),n(4721)),r=n(6724),i=n(6261),c=n(4176),d=n(2840),h=n(579);const p=()=>(0,h.jsxs)("div",{className:"API",children:[(0,h.jsx)("title",{children:"API | OSGL"}),(0,h.jsx)(s.A,{}),(0,h.jsx)("div",{className:"sidebar-content",children:(0,h.jsx)(o.A,{links:c.A})}),(0,h.jsxs)("div",{className:"api-content",children:[(0,h.jsx)("h1",{className:"api-header",children:"Font"}),(0,h.jsx)("div",{className:"api-header-line"}),(0,h.jsx)(d.A,{metadata:{composite:!0,partialThreadSafe:!0}}),(0,h.jsx)("p",{className:"api-paragraph",children:"The Font class handles the rendering and loading of Fonts."}),(0,h.jsx)("h1",{className:"api-header",children:"Types"}),(0,h.jsx)("div",{className:"api-header-line"}),(0,h.jsx)(l.A,{name:"Glyph",type:"number | buffer | { number }"}),(0,h.jsx)(l.A,{name:"Glyphs",type:"{ [string]: Glyph }"}),(0,h.jsx)(l.A,{name:"StoredFont",type:{version:"string",letters:"Glyphs",maxHeight:"number"}}),(0,h.jsx)("h1",{className:"api-header",children:"Properties"}),(0,h.jsx)("div",{className:"api-header-line"}),(0,h.jsx)(r.A,{name:"glyphs",fullName:"Font.glyphs",type:"Glyphs",desc:"A list of the fonts glyphs"}),(0,h.jsx)(r.A,{name:"spacing",fullName:"Font.spacing",type:"number",desc:"How much spacing between each letter"}),(0,h.jsx)(r.A,{name:"linePadding",fullName:"Font.linePadding",type:"number",desc:"How much spacing between each line"}),(0,h.jsx)("h1",{className:"api-header",children:"Functions"}),(0,h.jsx)("div",{className:"api-header-line"}),(0,h.jsx)(i.A,{name:"from",fullName:"Font.from",params:{data:"StoredFont"},returnType:"Result<Font, FontError>",desc:"Creates a new Font given an unloaded one.",code:"local OSGL = require(path.to.osgl)\nlocal Font = OSGL.Font\n\nlocal fontData = require(path.to.font)\nlocal font = Font.from(fontData):Unwrap()",metadata:{Checked:!0}}),(0,h.jsx)("h1",{className:"api-header",children:"Methods"}),(0,h.jsx)("div",{className:"api-header-line"}),(0,h.jsx)(i.A,{name:"Draw",isMethod:!0,fullName:"Font:Draw",params:{object:"DrawableObject",text:"string",x:"number",y:"number",color:"Color"},returnType:"Font",desc:"Draws the font at the given location.",code:'local OSGL = require(path.to.osgl)\nlocal Video = OSGL.Video\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 500, 500\n\nlocal fontData = require(path.to.font)\n\nlocal image = path.to.imageLabel\nlocal window = Window.from(image, WIDTH, HEIGHT)\nlocal font = Font.from(fontData):Unwrap()\n\nfont:Draw(window, "Hello, World!", 0, 0, color.BLACK)',metadata:{Checked:!0}}),(0,h.jsx)("div",{style:{height:"55px"}})]}),(0,h.jsx)(t.A,{}),(0,h.jsx)("div",{className:"grid-background-dark"})]})}}]);
//# sourceMappingURL=444.dfe9cbcd.chunk.js.map