{"version":3,"file":"static/js/991.bfe06754.chunk.js","mappings":"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","sources":["api/components/type-highlighter.js","api/components/api-type.js","api/pages/window.js"],"sourcesContent":["import React from \"react\";\r\nimport { highlightType } from \"./function-highlighter\";\r\n\r\nconst SyntaxHighlighter = ({ name, definition }) => {\r\n  const highlightSyntax = (code) => {\r\n    return code\r\n      .replace(/\\b(type)\\b/g, '<span class=\"keyword\">$1</span>')\r\n      .replace(/(--.*)$/gm, '<span class=\"comment\">$1</span>');\r\n  };\r\n\r\n  const highlightTypeDefinition = (typeDef) => {\r\n    const parts = typeDef.split(/([&|])/);\r\n    \r\n    return parts.map((part, _) => {\r\n      if (part === '&' || part === '|') {\r\n        return part;\r\n      }\r\n\r\n      const whitespaceBefore = part.match(/^\\s*/)[0];\r\n      const whitespaceAfter = part.match(/\\s*$/)[0];\r\n      return `${whitespaceBefore}${highlightType(part.trim())}${whitespaceAfter}`;\r\n    }).join('');\r\n  };\r\n\r\n  let output = \"\";\r\n\r\n  if (typeof definition === \"string\") {\r\n    const baseType = definition.replace(/\\?$/, \"\");\r\n    const isOptional = definition.endsWith(\"?\");\r\n    const highlightedType = highlightTypeDefinition(baseType);\r\n    output = `type ${name} = ${highlightedType}${isOptional ? \"?\" : \"\"};`;\r\n  } else if (typeof definition === \"object\") {\r\n    const formattedProps = Object.entries(definition)\r\n      .map(([key, value]) => {\r\n        let type = \"\";\r\n        let comment = \"\";\r\n\r\n        if (typeof value === \"string\") {\r\n          type = highlightTypeDefinition(value.replace(/\\?$/, \"\")) + \r\n                (value.endsWith(\"?\") ? \"?\" : \"\");\r\n        } else if (typeof value === \"object\" && value.type) {\r\n          type = highlightTypeDefinition(value.type.replace(/\\?$/, \"\")) + \r\n                (value.type.endsWith(\"?\") ? \"?\" : \"\");\r\n          comment = value.comment ? ` -- ${value.comment}` : \"\";\r\n        }\r\n\r\n        return `    ${key}: ${type};${comment}`;\r\n      })\r\n      .join(\"\\n\");\r\n\r\n    output = `type ${name} = {\\n${formattedProps}\\n}`;\r\n  } else {\r\n    output = \"/* Invalid Input */\";\r\n  }\r\n\r\n  return (\r\n    <pre className=\"output\" dangerouslySetInnerHTML={{ __html: highlightSyntax(output) }} />\r\n  );\r\n};\r\n\r\nexport default SyntaxHighlighter;","import React, { useEffect } from \"react\";\r\nimport SyntaxHighlighter from \"./type-highlighter\";\r\nimport CodeBlock from \"../../docs/components/codeblock\";\r\n\r\nconst Type = ({ name, type, code }) => {\r\n    const id = name.replace(/\\s+/g, \"-\").toLowerCase();\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            if (window.location.hash === `#${id}`) {\r\n                const element = document.getElementById(id);\r\n                if (element) {\r\n                    element.scrollIntoView({\r\n                        behavior: \"smooth\",\r\n                        block: \"center\",\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        handleScroll();\r\n\r\n        window.addEventListener(\"hashchange\", handleScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"hashchange\", handleScroll);\r\n        };\r\n    }, [id]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <code id={id} className=\"api-name-header\">{name}</code>\r\n            <br />\r\n            <SyntaxHighlighter name={name} definition={type} />\r\n            {code && (\r\n                <div className=\"code-block\">\r\n                    <CodeBlock code={code} language=\"lua\" />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Type;","import React from \"react\";\r\nimport '../Api.css';\r\nimport Footer from \"../../components/footer\";\r\nimport APITopbar from \"../components/api-topbar\";\r\nimport Sidebar from \"../components/sidebar\";\r\nimport \"../css/api-sidebar.css\";\r\nimport Type from \"../components/api-type\";\r\nimport Prop from \"../components/api-prop\";\r\nimport Func from \"../components/api-function\";\r\nimport SidebarInfo from \"../sidebar-info\";\r\nimport ClassMeta from \"../components/class-meta\";\r\n\r\nconst Window = () => {\r\n    return (\r\n        <div className=\"API\">\r\n            <title>API | OSGL</title>\r\n            <APITopbar />\r\n\r\n            <div className=\"sidebar-content\">\r\n                <Sidebar links={SidebarInfo} />\r\n            </div>\r\n\r\n            <div className=\"api-content\">\r\n                <h1 className=\"api-header\">Window</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <ClassMeta metadata={{\r\n                    inherits: [\"DrawableObject\"],\r\n                    core: true,\r\n                    partialThreadSafe: true,\r\n                }} />\r\n\r\n                \r\n                <p className=\"api-paragraph\">The Window class handles the creation and rendering of Windows.</p>\r\n\r\n                <h1 className=\"api-header\">Types</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <Type\r\n                    name=\"TextureBase\"\r\n                    type=\"Decal | Texture\"\r\n                />\r\n                <Type\r\n                    name=\"ImageBase\"\r\n                    type=\"ImageLabel | ImageButton\"\r\n                />\r\n                <Type\r\n                    name=\"Drawable\"\r\n                    type=\"TextureBase | ImageBase | MeshPart\"\r\n                />\r\n\r\n                <h1 className=\"api-header\">Properties</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <Prop name=\"surfaces\" fullName=\"Window.surfaces\" type=\"{Drawable}\" desc=\"All the instances the Window is currently rendering to.\" />\r\n                <Prop name=\"editableImage\" fullName=\"Window.editableImage\" type=\"EditableImage\" desc=\"The EditableImage the Window internally uses.\" />\r\n                <Prop name=\"targetFPS\" fullName=\"Window.targetFPS\" type=\"number\" desc=\"The rate that the Window will render at when the RenderTargetFPS method is called.\" />\r\n\r\n                <h1 className=\"api-header\">Functions</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <Func\r\n                    name=\"new\"\r\n                    fullName=\"Window.new\"\r\n                    params={{\r\n                        editableImage: \"EditableImage\",\r\n                        renderers: \"{Drawable}\",\r\n                    }}\r\n                    returnType=\"Result<Window, WindowError>\"\r\n                    desc=\"Creates a new Window object given an EditableImage.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal myWindow = Window.new(path.to.editableImage, {}):Unwrap()`}\r\n                    metadata={{\r\n                        Checked: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"from\"\r\n                    fullName=\"Window.from\"\r\n                    params={{\r\n                        drawableObject: \"Drawable\",\r\n                        width: \"number\",\r\n                        height: \"number\"\r\n                    }}\r\n                    returnType=\"Result<Window, WindowError>\"\r\n                    desc=\"Creates a new Window object given a drawable instance.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH = 50\r\nlocal HEIGHT = 50\r\n\r\nlocal imageLabel = path.to.imageLabel\r\nlocal myWindow = Window.from(imageLabel, WIDTH, HEIGHT):Unwrap()`}\r\nmetadata={{\r\n    Checked: true,\r\n}}\r\n                />\r\n\r\n                <Func\r\n                    name=\"fromAssetId\"\r\n                    fullName=\"Window.fromAssetId\"\r\n                    params={{\r\n                        assetId: \"string\",\r\n                    }}\r\n                    returnType=\"Result<Window, WindowError>\"\r\n                    desc=\"Creates a new RGBA color value from RGB.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal window = Window.fromAssetId(\"rbxassetid://ID\"):Unwrap()`}\r\nmetadata={{\r\n    Checked: true,\r\n}}\r\n                />\r\n\r\n                <Func\r\n                    name=\"fromBuffer\"\r\n                    fullName=\"Window.fromBuffer\"\r\n                    params={{\r\n                        buffer: \"buffer\",\r\n                        width: \"number\",\r\n                        height: \"number\"\r\n                    }}\r\n                    returnType=\"Result<Window, WindowError>\"\r\n                    desc=\"Creates a new Window object given a buffer.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH = 50\r\nlocal HEIGHT = 50\r\n\r\nlocal bfr = buffer.create(WIDTH * HEIGHT * 4)\r\nlocal window = Window.fromBuffer(bfr, WIDTH, HEIGHT):Unwrap()`}\r\nmetadata={{\r\n    Checked: true,\r\n}}\r\n                />\r\n\r\n                <Func\r\n                    name=\"isDrawableInstance\"\r\n                    fullName=\"Window.isDrawableInstance\"\r\n                    params={{\r\n                        object: \"Instance\",\r\n                    }}\r\n                    returnType=\"boolean\"\r\n                    desc=\"Checks if the given instance could be drawn onto a Window.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal instance = workspace.SpawnLocation\r\nlocal image = workspace.ImageLabel\r\n\r\nprint(Window.isDrawableInstance(instance)) -- false\r\nprint(Window.isDrawableInstance(image)) -- true`}\r\n                    metadata={{\r\n                        Debug: true,\r\n                        ThreadSafe: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"getRenderingProperty\"\r\n                    fullName=\"Window.getRenderingProperty\"\r\n                    params={{\r\n                        drawable: \"Drawable\",\r\n                    }}\r\n                    returnType=\"'ImageContent' | 'TextureContent' | ''\"\r\n                    desc=\"Given an Instance, returns the property that the EditableImage should render to.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal texture = workspace.Texture\r\nlocal image = workspace.ImageLabel\r\n\r\nprint(Window.isDrawableInstance(texture)) -- \"TextureContent\"\r\nprint(Window.isDrawableInstance(image)) -- \"ImageContent\"`}\r\nmetadata={{\r\n    Debug: true,\r\n    ThreadSafe: true,\r\n}}\r\n                />\r\n\r\n                <h1 className=\"api-header\">Methods</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <Func\r\n                    name=\"Render\"\r\n                    fullName=\"Window:Render\"\r\n                    params={{}}\r\n                    returnType=\"nil\"\r\n                    desc=\"Renders the Window's buffer to the screen.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\n-- Create a window\r\nlocal window = Window.fromAssetId(\"rbxassetid://ID\"):Unwrap()\r\n-- *Do drawing here*\r\n\r\nWindow:Render()`}\r\n                    isMethod={true}\r\n                />\r\n\r\n<Func\r\n                    name=\"RenderTargetFPS\"\r\n                    fullName=\"Window:RenderTargetFPS\"\r\n                    params={{}}\r\n                    returnType=\"nil\"\r\n                    desc=\"Renders the Window's buffer to the screen at the rate of the Window's target FPS.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\n-- Create a window\r\nlocal window = Window.fromAssetId(\"rbxassetid://ID\"):Unwrap()\r\nwindow.targetFPS = 244\r\n-- *Do drawing here*\r\n\r\nwhile true do\r\n    -- Aim to render at 244fps\r\n    Window:RenderTargetFPS()\r\nend`}\r\n                    isMethod={true}\r\n                />\r\n\r\n                <Func\r\n                    name=\"AddRenderers\"\r\n                    fullName=\"Window:AddRenderers\"\r\n                    params={{\r\n                        renderers: \"...Drawable\",\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Adds an additional list of objects to render the Window to.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\n-- Create a window\r\nlocal window = Window.from(path.to.image, WIDTH, HEIGHT):Unwrap()\r\nwindow:AddRenderers(workspace.ImageLabel, workspace.Texture)\r\n\r\nWindow:Render()`}\r\n                    isMethod={true}\r\n                />\r\n\r\n<Func\r\n                    name=\"RemoveRenderers\"\r\n                    fullName=\"Window:RemoveRenderers\"\r\n                    params={{\r\n                        renderers: \"...Drawable\",\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Removes a list of objects that the Window is currently rendering to.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\n-- Create a window\r\nlocal window = Window.from(path.to.image, WIDTH, HEIGHT):Unwrap()\r\nwindow:AddRenderers(workspace.ImageLabel, workspace.Texture)\r\n\r\nWindow:Render()\r\n\r\n-- Stop rendering to the ImageLabel\r\nwindow:RemoveRenderers(workspace.ImageLabel)`}\r\n                    isMethod={true}\r\n                />\r\n\r\n<Func\r\n                    name=\"GetRelativeMousePosition\"\r\n                    fullName=\"Window:GetRelativeMousePosition\"\r\n                    params={{}}\r\n                    returnType=\"(boolean, number, number)\"\r\n                    desc=\"Returns whether the mouse is hovering over the Window, and if so what its X and Y positions are relative to the top-left corner.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\n-- Create a window\r\nlocal window = Window.from(path.to.image, WIDTH, HEIGHT):Unwrap()\r\nwhile task.wait() do\r\n    local hovering, x, y = window:GetRelativeMousePosition(path.to.image)\r\n    if hovering then\r\n        print(\"Mouse is hovering over the window at (\" .. x .. \", \" .. y .. \")\")\r\n    end\r\nend`}\r\n                    isMethod={true}\r\n                />\r\n\r\n<Func\r\n                    name=\"Destroy\"\r\n                    fullName=\"Window:Destroy\"\r\n                    params={{}}\r\n                    returnType=\"nil\"\r\n                    desc=\"Destroys all information related to the Window, including the EditableImage itself.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\n-- Create a window\r\nlocal window = Window.from(path.to.image, WIDTH, HEIGHT):Unwrap()\r\n-- Do something with the Window\r\nwindow:Destroy() -- Free the window`}\r\n                    isMethod={true}\r\n                />\r\n\r\n                <div style={{ height: \"55px\" }} />\r\n            </div>\r\n            <Footer />\r\n            <div className=\"grid-background-dark\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Window;\r\n"],"names":["_ref","name","definition","highlightTypeDefinition","typeDef","split","map","part","_","whitespaceBefore","match","whitespaceAfter","highlightType","trim","join","output","baseType","replace","isOptional","endsWith","Object","entries","_ref2","key","value","type","comment","_jsx","className","dangerouslySetInnerHTML","__html","code","id","toLowerCase","useEffect","handleScroll","window","location","hash","element","document","getElementById","scrollIntoView","behavior","block","addEventListener","removeEventListener","_jsxs","children","SyntaxHighlighter","CodeBlock","language","Window","APITopbar","Sidebar","links","SidebarInfo","ClassMeta","metadata","inherits","core","partialThreadSafe","Type","Prop","fullName","desc","Func","params","editableImage","renderers","returnType","Checked","drawableObject","width","height","assetId","buffer","object","Debug","ThreadSafe","drawable","isMethod","style","Footer"],"sourceRoot":""}