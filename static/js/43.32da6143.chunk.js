"use strict";(self.webpackChunkosgl_docs=self.webpackChunkosgl_docs||[]).push([[43],{4191:(e,r,a)=>{a.r(r),a.d(r,{default:()=>d});a(5043),a(3774);var t=a(929),n=a(9073),l=a(788),s=(a(5613),a(4721)),c=(a(6724),a(6261)),o=a(4176),i=a(2840),u=a(579);const d=()=>(0,u.jsxs)("div",{className:"API",children:[(0,u.jsx)("title",{children:"API | OSGL"}),(0,u.jsx)(n.A,{}),(0,u.jsx)("div",{className:"sidebar-content",children:(0,u.jsx)(l.A,{links:o.A})}),(0,u.jsxs)("div",{className:"api-content",children:[(0,u.jsx)("h1",{className:"api-header",children:"Texture"}),(0,u.jsx)("div",{className:"api-header-line"}),(0,u.jsx)(i.A,{metadata:{inherits:["DrawableObject"],core:!0,partialThreadSafe:!0}}),(0,u.jsx)("p",{className:"api-paragraph",children:"The Texture class handles the loading and drawing of all Texture instances."}),(0,u.jsx)("h1",{className:"api-header",children:"Types"}),(0,u.jsx)("div",{className:"api-header-line"}),(0,u.jsx)(s.A,{name:"BaseRawTexture",type:{version:"string",width:"number",height:"number",pixels:"buffer"}}),(0,u.jsx)(s.A,{name:"BaseUnloadedTexture",type:{version:"'1.6b'",width:"number",height:"number",pixels:"buffer"}}),(0,u.jsx)(s.A,{name:"RawTexture",type:"ModuleScript | BaseUnloadedTexture"}),(0,u.jsx)("h1",{className:"api-header",children:"Functions"}),(0,u.jsx)("div",{className:"api-header-line"}),(0,u.jsx)(c.A,{name:"fromChecked",fullName:"Texture.fromChecked",params:{rawTexture:"RawTexture"},returnType:"Result<Texture, TextureError>",desc:"Creates a new Texture given a raw one.",code:"local OSGL = require(path.to.osgl)\nlocal Texture = OSGL.Texture\n\nlocal myTexture = Texture.fromChecked(script.myTextureModulescript)",metadata:{Checked:!0}}),(0,u.jsx)(c.A,{name:"fromUnchecked",fullName:"Texture.fromUnchecked",params:{rawTexture:"BaseUnloadedTexture"},returnType:"Texture",desc:"Creates a new Texture given an unloaded one.",code:"local OSGL = require(path.to.osgl)\nlocal Texture = OSGL.Texture\n\nlocal textureData = require(script.myTextureModulecript)\n\nlocal myTexture = Texture.fromUnchecked(textureData)",metadata:{Unchecked:!0}}),(0,u.jsx)(c.A,{name:"fromAssetId",fullName:"Texture.fromAssetId",params:{assetId:"string"},returnType:"Result<Texture, TextureError>",desc:"Creates a new Texture given an asset id.",code:'local OSGL = require(path.to.osgl)\nlocal Texture = OSGL.Texture\n\nlocal texture = Texture.fromAssetId("rbxassetid://ID"):Unwrap()',metadata:{Checked:!0}}),(0,u.jsx)(c.A,{name:"new",fullName:"Texture.new",params:{width:"width",height:"height",buffer:"buffer?"},returnType:"Result<Texture, DrawableError>",desc:"Creates a new Texture given a buffer, along with its dimensions.",code:"local OSGL = require(path.to.osgl)\nlocal Texture = OSGL.Texture\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\n\n-- Only errors if WIDTH * HEIGHT * 4 ~= length of the buffer provided\nlocal texture = Texture.new(WIDTH, HEIGHT, window.buffer):Unwrap()",metadata:{Checked:!0}}),(0,u.jsx)(c.A,{name:"serializeChecked",fullName:"Texture.serializeChecked",params:{rawTexture:"RawTexture"},returnType:"Result<(buffer, number, number), TextureError>",desc:"Serializes a raw texture.",code:"local OSGL = require(path.to.osgl)\nlocal Texture = OSGL.Texture\n\nlocal txt = Texture.serializeChecked(script.myTextureModulescript)",metadata:{Checked:!0}}),(0,u.jsx)(c.A,{name:"serializeUnchecked",fullName:"Texture.serializeUnchecked",params:{rawTexture:"BaseUnloadedTexture"},returnType:"buffer, number, number",desc:"Serializes an unloaded texture.",code:"local OSGL = require(path.to.osgl)\nlocal Texture = OSGL.Texture\n\nlocal textureData = require(script.myTextureModulescript)\n\nlocal buffer, width, height = Texture.serializeUnchecked(textureData)",metadata:{Unchecked:!0}}),(0,u.jsx)(c.A,{name:"drawChecked",fullName:"Texture.drawChecked",params:{object:"DrawableObject",texture:"Texture",x:"number",y:"number",rotation:"number?"},returnType:"nil",desc:"Draws a Texture somewhere if in-bound.",code:"local OSGL = require(path.to.osgl)\nlocal Texture = OSGL.Texture\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel\nlocal myWindow = Window.from(image, WIDTH, HEIGHT):Unwrap()\n\nlocal myTexture = Texture.fromChecked(script.myTextureModulescript):Unwrap()\nTexture.DrawChecked(myWindow, myTexture, 0, 0)",metadata:{Checked:!0}}),(0,u.jsx)(c.A,{name:"drawUnchecked",fullName:"Texture.drawUnchecked",params:{object:"DrawableObject",texture:"Texture",x:"number",y:"number",rotation:"number?"},returnType:"nil",desc:"Draws a Texture somewhere.",code:"local OSGL = require(path.to.osgl)\nlocal Texture = OSGL.Texture\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel\nlocal myWindow = Window.from(image, WIDTH, HEIGHT):Unwrap()\n\nlocal myTexture = Texture.fromChecked(script.myTextureModulescript):Unwrap()\nTexture.DrawUnchecked(myWindow, myTexture, 0, 0)",metadata:{Unchecked:!0}}),(0,u.jsx)("div",{style:{height:"55px"}})]}),(0,u.jsx)(t.A,{}),(0,u.jsx)("div",{className:"grid-background-dark"})]})},4721:(e,r,a)=>{a.d(r,{A:()=>o});var t=a(5043),n=a(2207),l=a(579);const s=e=>{let{name:r,definition:a}=e;const t=e=>e.split(/([&|])/).map(((e,r)=>{if("&"===e||"|"===e)return e;const a=e.match(/^\s*/)[0],t=e.match(/\s*$/)[0];return`${a}${(0,n.FD)(e.trim())}${t}`})).join("");let s="";if("string"===typeof a){const e=a.replace(/\?$/,""),n=a.endsWith("?");s=`type ${r} = ${t(e)}${n?"?":""};`}else if("object"===typeof a){s=`type ${r} = {\n${Object.entries(a).map((e=>{let[r,a]=e,n="",l="";return"string"===typeof a?n=t(a.replace(/\?$/,""))+(a.endsWith("?")?"?":""):"object"===typeof a&&a.type&&(n=t(a.type.replace(/\?$/,""))+(a.type.endsWith("?")?"?":""),l=a.comment?` -- ${a.comment}`:""),`    ${r}: ${n};${l}`})).join("\n")}\n}`}else s="/* Invalid Input */";return(0,l.jsx)("pre",{className:"output",dangerouslySetInnerHTML:{__html:(c=s,c.replace(/\b(type)\b/g,'<span class="keyword">$1</span>').replace(/(--.*)$/gm,'<span class="comment">$1</span>'))}});var c};var c=a(4221);const o=e=>{let{name:r,type:a,code:n}=e;const o=r.replace(/\s+/g,"-").toLowerCase();return(0,t.useEffect)((()=>{const e=()=>{if(window.location.hash===`#${o}`){const e=document.getElementById(o);e&&e.scrollIntoView({behavior:"smooth",block:"center"})}};return e(),window.addEventListener("hashchange",e),()=>{window.removeEventListener("hashchange",e)}}),[o]),(0,l.jsxs)("div",{children:[(0,l.jsx)("code",{id:o,className:"api-name-header",children:r}),(0,l.jsx)("br",{}),(0,l.jsx)(s,{name:r,definition:a}),n&&(0,l.jsx)("div",{className:"code-block",children:(0,l.jsx)(c.A,{code:n,language:"lua"})})]})}}}]);
//# sourceMappingURL=43.32da6143.chunk.js.map