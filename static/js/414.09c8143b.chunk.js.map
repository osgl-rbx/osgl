{"version":3,"file":"static/js/414.09c8143b.chunk.js","mappings":"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","sources":["api/pages/bitmap.js","api/components/type-highlighter.js","api/components/api-type.js"],"sourcesContent":["import React from \"react\";\r\nimport '../Api.css';\r\nimport Footer from \"../../components/footer\";\r\nimport APITopbar from \"../components/api-topbar\";\r\nimport Sidebar from \"../components/sidebar\";\r\nimport \"../css/api-sidebar.css\";\r\nimport Type from \"../components/api-type\";\r\nimport Prop from \"../components/api-prop\";\r\nimport Func from \"../components/api-function\";\r\nimport SidebarInfo from \"../sidebar-info\";\r\nimport ClassMeta from \"../components/class-meta\";\r\n\r\nconst Bitmap = () => {\r\n    return (\r\n        <div className=\"API\">\r\n            <title>API | OSGL</title>\r\n            <APITopbar />\r\n\r\n            <div className=\"sidebar-content\">\r\n                <Sidebar links={SidebarInfo} />\r\n            </div>\r\n\r\n            <div className=\"api-content\">\r\n                <h1 className=\"api-header\">Bitmap</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <ClassMeta metadata={{\r\n                    core: true,\r\n                    partialThreadSafe: true,\r\n                }} />\r\n\r\n                <p className=\"api-paragraph\">Bitmaps are specialized versions of textures with a variable amount of Color channels.</p>\r\n\r\n                <h1 className=\"api-header\">Properties</h1>\r\n                <div className=\"api-header-line\"></div>\r\n                <Prop name=\"width\" fullName=\"Bitmap.width\" type=\"number\" desc=\"The width of the bitmap.\" />\r\n                <Prop name=\"height\" fullName=\"Bitmap.height\" type=\"number\" desc=\"The height of the bitmap.\" />\r\n                <Prop name=\"buffer\" fullName=\"Bitmap.buffer\" type=\"buffer\" desc=\"The pixels that the bitmap is storing.\" />\r\n                <Prop name=\"channels\" fullName=\"Bitmap.channels\" type=\"number\" desc=\"The amount of channels the bitmap is storing.\" />\r\n\r\n                <h1 className=\"api-header\">Functions</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <Func\r\n                    name=\"fromChecked\"\r\n                    fullName=\"Bitmap.fromChecked\"\r\n                    params={{\r\n                        rawTexture: \"RawTexture\",\r\n                    }}\r\n                    returnType=\"Result<Bitmap, TextureError>\"\r\n                    desc=\"Creates a new Bitmap given a raw one.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Bitmap = OSGL.Bitmap\r\n\r\nlocal myBitmap = myBitmap.fromChecked(script.myBitmapModule)`}\r\n                    metadata={{\r\n                        Checked: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"fromUnchecked\"\r\n                    fullName=\"Bitmap.fromUnchecked\"\r\n                    params={{\r\n                        rawTexture: \"baseUnloadedTexture\",\r\n                    }}\r\n                    returnType=\"Bitmap\"\r\n                    desc=\"Creates a new Bitmap given an unloaded one.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Bitmap = OSGL.Bitmap\r\n\r\nlocal bitmapData = require(script.myBitmapModulecript)\r\n\r\nlocal myBitmap = myBitmap.fromUnchecked(bitmapData)`}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                    }}\r\n                />\r\n\r\n\r\n                <Func\r\n                    name=\"Read\"\r\n                    fullName=\"Bitmap:Read\"\r\n                    isMethod={true}\r\n                    params={{\r\n                        x: \"number\",\r\n                        y: \"number\",\r\n                        channel: \"number?\"\r\n                    }}\r\n                    returnType=\"number\"\r\n                    desc=\"Reads a value from a specific channel of a pixel, defaulting to the first channel if one is not provided.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Bitmap = OSGL.Bitmap\r\n\r\nlocal bitmapData = require(script.myBitmapModulecript)\r\n\r\nlocal myBitmap = myBitmap.fromUnchecked(bitmapData)\r\n\r\n-- Read the 2nd channel of the pixel at (5, 5)\r\nprint(myBitmap:Read(5, 5, 2))`}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                    }}\r\n                />\r\n\r\n<Func\r\n                    name=\"Write\"\r\n                    fullName=\"Bitmap:Write\"\r\n                    isMethod={true}\r\n                    params={{\r\n                        x: \"number\",\r\n                        y: \"number\",\r\n                        channel: \"number\",\r\n                        value: \"number\",\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Writes a value to a specific channel of a pixel.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Bitmap = OSGL.Bitmap\r\n\r\nlocal bitmapData = require(script.myBitmapModulecript)\r\n\r\nlocal myBitmap = myBitmap.fromUnchecked(bitmapData)\r\n\r\n-- Write 255 to the second channel of the pixel at (5, 5)\r\nmyBitmap:Write(5, 5, 2, 255)`}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                    }}\r\n                />\r\n\r\n                <div style={{ height: \"55px\" }} />\r\n            </div>\r\n            <Footer />\r\n            <div className=\"grid-background-dark\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Bitmap;\r\n","import React from \"react\";\r\nimport { highlightType } from \"./function-highlighter\";\r\n\r\nconst SyntaxHighlighter = ({ name, definition }) => {\r\n  const highlightSyntax = (code) => {\r\n    return code\r\n      .replace(/\\b(type)\\b/g, '<span class=\"keyword\">$1</span>')\r\n      .replace(/(--.*)$/gm, '<span class=\"comment\">$1</span>');\r\n  };\r\n\r\n  const highlightTypeDefinition = (typeDef) => {\r\n    const parts = typeDef.split(/([&|])/);\r\n    \r\n    return parts.map((part, _) => {\r\n      if (part === '&' || part === '|') {\r\n        return part;\r\n      }\r\n\r\n      const whitespaceBefore = part.match(/^\\s*/)[0];\r\n      const whitespaceAfter = part.match(/\\s*$/)[0];\r\n      return `${whitespaceBefore}${highlightType(part.trim())}${whitespaceAfter}`;\r\n    }).join('');\r\n  };\r\n\r\n  let output = \"\";\r\n\r\n  if (typeof definition === \"string\") {\r\n    const baseType = definition.replace(/\\?$/, \"\");\r\n    const isOptional = definition.endsWith(\"?\");\r\n    const highlightedType = highlightTypeDefinition(baseType);\r\n    output = `type ${name} = ${highlightedType}${isOptional ? \"?\" : \"\"};`;\r\n  } else if (typeof definition === \"object\") {\r\n    const formattedProps = Object.entries(definition)\r\n      .map(([key, value]) => {\r\n        let type = \"\";\r\n        let comment = \"\";\r\n\r\n        if (typeof value === \"string\") {\r\n          type = highlightTypeDefinition(value.replace(/\\?$/, \"\")) + \r\n                (value.endsWith(\"?\") ? \"?\" : \"\");\r\n        } else if (typeof value === \"object\" && value.type) {\r\n          type = highlightTypeDefinition(value.type.replace(/\\?$/, \"\")) + \r\n                (value.type.endsWith(\"?\") ? \"?\" : \"\");\r\n          comment = value.comment ? ` -- ${value.comment}` : \"\";\r\n        }\r\n\r\n        return `    ${key}: ${type};${comment}`;\r\n      })\r\n      .join(\"\\n\");\r\n\r\n    output = `type ${name} = {\\n${formattedProps}\\n}`;\r\n  } else {\r\n    output = \"/* Invalid Input */\";\r\n  }\r\n\r\n  return (\r\n    <pre className=\"output\" dangerouslySetInnerHTML={{ __html: highlightSyntax(output) }} />\r\n  );\r\n};\r\n\r\nexport default SyntaxHighlighter;","import React, { useEffect } from \"react\";\r\nimport SyntaxHighlighter from \"./type-highlighter\";\r\nimport CodeBlock from \"../../docs/components/codeblock\";\r\n\r\nconst Type = ({ name, type, code }) => {\r\n    const id = name.replace(/\\s+/g, \"-\").toLowerCase();\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            if (window.location.hash === `#${id}`) {\r\n                const element = document.getElementById(id);\r\n                if (element) {\r\n                    element.scrollIntoView({\r\n                        behavior: \"smooth\",\r\n                        block: \"center\",\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        handleScroll();\r\n\r\n        window.addEventListener(\"hashchange\", handleScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"hashchange\", handleScroll);\r\n        };\r\n    }, [id]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <code id={id} className=\"api-name-header\">{name}</code>\r\n            <br />\r\n            <SyntaxHighlighter name={name} definition={type} />\r\n            {code && (\r\n                <div className=\"code-block\">\r\n                    <CodeBlock code={code} language=\"lua\" />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Type;"],"names":["Bitmap","_jsxs","className","children","_jsx","APITopbar","Sidebar","links","SidebarInfo","ClassMeta","metadata","core","partialThreadSafe","Prop","name","fullName","type","desc","Func","params","rawTexture","returnType","code","Checked","Unchecked","isMethod","x","y","channel","value","style","height","Footer","_ref","definition","highlightTypeDefinition","typeDef","split","map","part","_","whitespaceBefore","match","whitespaceAfter","highlightType","trim","join","output","baseType","replace","isOptional","endsWith","Object","entries","_ref2","key","comment","dangerouslySetInnerHTML","__html","id","toLowerCase","useEffect","handleScroll","window","location","hash","element","document","getElementById","scrollIntoView","behavior","block","addEventListener","removeEventListener","SyntaxHighlighter","CodeBlock","language"],"sourceRoot":""}