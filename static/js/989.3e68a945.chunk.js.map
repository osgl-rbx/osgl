{"version":3,"file":"static/js/989.3e68a945.chunk.js","mappings":"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","sources":["docs/components/sidebar.js","docs/components/codeblock.js","docs/components/image-viewer.js","docs/components/doc-topbar.js","docs/pages/introduction/rendering-to-a-window.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Sidebar = ({ sections }) => {\r\n  const [openSections, setOpenSections] = useState({});\r\n  const [animationStates, setAnimationStates] = useState({});\r\n  const [currentPath, setCurrentPath] = useState(window.location.pathname);\r\n\r\n  useEffect(() => {\r\n    const handleLocationChange = () => {\r\n      setCurrentPath(window.location.pathname);\r\n    };\r\n\r\n    window.addEventListener('popstate', handleLocationChange);\r\n    return () => window.removeEventListener('popstate', handleLocationChange);\r\n  }, []);\r\n\r\n  const toggleSection = (section) => {\r\n    if (openSections[section]) {\r\n      setAnimationStates((prev) => ({ ...prev, [section]: 'fade-out' }));\r\n      setTimeout(() => {\r\n        setOpenSections((prev) => ({ ...prev, [section]: false }));\r\n        setAnimationStates((prev) => ({ ...prev, [section]: '' }));\r\n      }, 300);\r\n    } else {\r\n      setOpenSections((prev) => ({ ...prev, [section]: true }));\r\n      setAnimationStates((prev) => ({ ...prev, [section]: 'fade-in' }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      {sections.map((section, index) => {\r\n        const isSectionActive = currentPath.startsWith(`/${section.id}`);\r\n        return (\r\n          <div key={index} className=\"sidebar-section\">\r\n            <div \r\n              className=\"section-header\" \r\n              onClick={() => toggleSection(section.title)}\r\n            >\r\n              <span style={{ color: isSectionActive ? '#446EE4' : 'white' }}>\r\n                {section.title}\r\n              </span>\r\n              <span \r\n                className=\"toggle-icon\" \r\n                style={{ transform: openSections[section.title] ? 'rotate(90deg)' : 'rotate(0deg)' }}\r\n              >\r\n                ►\r\n              </span>\r\n            </div>\r\n\r\n            {openSections[section.title] && (\r\n              <div className={`sub-sections ${animationStates[section.title]}`}>\r\n                {section.links.map((link, linkIndex) => {\r\n                  const isLinkActive = currentPath === link.href;\r\n                  return (\r\n                    <a \r\n                      key={linkIndex} \r\n                      href={link.href} \r\n                      className=\"sub-section-link\"\r\n                      style={{ \r\n                        animationDelay: `${linkIndex * 0.1}s`,\r\n                        color: isLinkActive ? '#446EE4' : '#c2c7d6',\r\n                      }}\r\n                    >\r\n                      {link.text}\r\n                    </a>\r\n                  );\r\n                })}\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport hljs from \"highlight.js\";\r\nimport \"highlight.js/styles/github-dark.css\";\r\nimport '../Docs.css'; // Import your CSS file\r\n\r\nconst CodeBlock = ({ code, language = \"lua\", filename }) => {\r\n    useEffect(() => {\r\n        hljs.registerLanguage('lua', require('highlight.js/lib/languages/lua'));\r\n    }, []);\r\n\r\n    const [copied, setCopied] = useState(false);\r\n    const codeRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (codeRef.current) {\r\n            hljs.highlightElement(codeRef.current);\r\n        }\r\n    }, [code]);\r\n\r\n    const copyToClipboard = () => {\r\n        navigator.clipboard.writeText(code)\r\n            .then(() => {\r\n                setCopied(true);\r\n                setTimeout(() => setCopied(false), 1500);\r\n            })\r\n            .catch(err => console.error(\"Copy failed:\", err));\r\n    };\r\n\r\n    return (\r\n        <div className=\"code-block-container\">\r\n            {filename && (\r\n                <div className=\"filename\">\r\n                    <p className=\"doc-paragraph\">{filename}</p>\r\n                </div>\r\n            )}\r\n\r\n            {/* Code block */}\r\n            <pre className=\"code-block\">\r\n                <code ref={codeRef} className={`language-${language}`}>\r\n                    {code}\r\n                </code>\r\n            </pre>\r\n\r\n            {/* Copy button */}\r\n            <button \r\n                className={`copy-btn ${copied ? \"copied\" : \"\"}`}\r\n                onClick={copyToClipboard}\r\n            >\r\n                {copied ? \"Copied!\" : \"Copy\"}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CodeBlock;","import React, { useState, useEffect } from \"react\";\r\n\r\nconst ImageViewer = ({ src, alt = \"Image\", className = \"\" }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isVisible, setIsVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            // Delay adding \"visible\" class for fade-in effect\r\n            setTimeout(() => setIsVisible(true), 10);\r\n        } else {\r\n            // Start fade-out animation\r\n            setIsVisible(false);\r\n        }\r\n    }, [isOpen]);\r\n\r\n    useEffect(() => {\r\n        const handleKeyDown = (e) => {\r\n            if (e.key === \"Escape\") closeLightbox();\r\n        };\r\n        document.addEventListener(\"keydown\", handleKeyDown);\r\n        return () => document.removeEventListener(\"keydown\", handleKeyDown);\r\n    }, []);\r\n\r\n    const closeLightbox = () => {\r\n        setIsVisible(false); // Start fade-out animation\r\n        setTimeout(() => setIsOpen(false), 300); // Wait for animation to finish before removing from DOM\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* Small Image */}\r\n            <img \r\n                src={\"/osgl\" + src} \r\n                alt={alt} \r\n                className={`image-thumbnail ${className}`}\r\n                onClick={() => setIsOpen(true)}\r\n            />\r\n\r\n            {/* Fullscreen Lightbox */}\r\n            {isOpen && (\r\n                <div className={`image-overlay ${isVisible ? \"visible\" : \"\"}`} onClick={closeLightbox}>\r\n                    <div className={`image-container ${isVisible ? \"visible\" : \"\"}`} onClick={(e) => e.stopPropagation()}>\r\n                        {/* Close Button */}\r\n                        <button className=\"close-button\" onClick={closeLightbox}>✕</button>\r\n\r\n                        {/* Enlarged Image */}\r\n                        <img src={\"/osgl\" + src} alt={alt} className=\"enlarged-image\" />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ImageViewer;","import React from \"react\";\r\nimport TopbarButton from \"../../components/topbar-button\";\r\nimport TopbarOneWayButton from \"../../components/topbar-one-way-button\";\r\n\r\nconst DocTopbar = () => {\r\n    return <div className=\"topbar\" style={{height: \"55px\", position: \"fixed\" }}>\r\n        <TopbarOneWayButton name=\"logo\" link=\"/osgl\" />\r\n\r\n        <div className=\"docs-sig\">\r\n            <img\r\n                src=\"/osgl/docs-colour.png\"\r\n                alt=\"docs\"\r\n                className=\"docs-img\"\r\n            />\r\n        </div>\r\n\r\n        <img src=\"/osgl/logo-sep.png\" alt=\"Separator\" className=\"seperator-img\" style={{marginLeft: \"75px\"}} />\r\n\r\n        <TopbarButton name=\"api\" link=\"/osgl/api\" />\r\n        <TopbarButton name=\"github\" link=\"https://github.com/osgl-rbx/osgl/\" />\r\n    </div>\r\n}\r\n\r\nexport default DocTopbar;","// THIS FILE HAS BEEN AUTOMATICALLY GENERATED AND IS NOT INTENDED TO BE READ\nimport React from \"react\";\nimport '../../Docs.css';\nimport Footer from \"../../../components/footer\";\nimport DocTopbar from \"../../components/doc-topbar\";\nimport CodeBlock from \"../../components/codeblock\";\nimport ImageViewer from \"../../components/image-viewer\";\nimport Sidebar from \"../../components/sidebar\";\nimport '../../flavours/note.css';\nimport '../../flavours/warn.css';\nimport '../../flavours/important.css';\nimport sidebarInfo from \"../../sidebar-info\";\nimport \"../../../css/sidebar.css\";\nconst File = () => {\n  return (\n    <div className=\"Docs\">\n      <title>Docs | OSGL</title>\n      <DocTopbar />\n      \n      <div className=\"sidebar-content\">\n        <Sidebar sections={sidebarInfo} />\n      </div>\n      <div className=\"doc-content\">{/* This file was automatically-generated */}\n\n<h1 className=\"doc-header\">Opening a Window</h1>\n<h2 className=\"doc-header\">Creating a canvas</h2>\n<div className=\"doc-header-line\"></div><p className=\"doc-paragraph\">In OSGL, a <code>Window</code> is an <code>EditableImage</code>. OSGL is wrapper around this <code>EditableImage</code> that gives you an easy-to-use higher-level API that can still interact with the base <code>EditableImage</code>.</p><p className=\"doc-paragraph\">A <code>Window</code> needs to be able to render its content on some sort of Image, so create an <code>ImageLabel</code> within a <code>ScreenGui</code> in <code>StarterGui</code>, with its <code>BackgroundTransparency</code> set to 0. Ensure that the <code>ScreenGui</code> is named <code>ScreenGui</code> and the <code>ImageLabel</code> is named <code>ImageLabel</code>. This <code>ImageLabel</code> will act as your primary canvas for rendering graphics. Your <code>StarterGui</code> hierarchy should look like this:</p><CodeBlock code={`> StarterGui\n    > ScreenGui\n        > ImageLabel`}></CodeBlock><p className=\"doc-paragraph\">To get a better view of the <code>ImageLabel</code> while in-game, you can place it in the center of the screen. This will help you see the rendered graphics more clearly instead of it being in a corner of the screen. Additionally, resizing the <code>ImageLabel</code> to a larger size, such as 420x420, can help you see what's rendered more easily.</p><p className=\"doc-paragraph\"><ImageViewer src=\"\\rendering-to-a-window\\blankcanvas.png\" /><br></br><i className=\"doc-paragraph\">In this image, the <code>AnchorPoint</code> property is set to <code>.5, .5</code>, with the position being <code>.5, 0, .5, 0</code>, and the size being <code>0, 420, 0, 420</code>.</i></p><div class=\"note\"><div class=\"note-title\">NOTE</div><div class=\"note-body\">Lower resolutions cause blurred images! If you're rendering at a low resolution, or just want a pixelated look, set the<code>ResampleMode</code> property of your <code>ImageLabel</code> to <code>Pixelated</code>!</div></div>\n<h2 className=\"doc-header\">Creating a Window</h2><p className=\"doc-paragraph\">Now that we have a canvas to work with, we can start programming. Create a <code>LocalScript</code> in a suitable location, such as <code>StarterPlayer/StarterPlayerScripts</code>.</p><p className=\"doc-paragraph\">The main OSGL module is divided into several sub-modules, each serving a different purpose. To create a <code>Window</code>, we need the <code>Window</code> sub-module. Let's import it:</p><CodeBlock code={`local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal OSGL = require(ReplicatedStorage.Packages.OSGL)\nlocal Window = OSGL.Window`}></CodeBlock><p className=\"doc-paragraph\">The <code>Window</code> module offers multiple ways to create a <code>Window</code>. The following is an extract from the API:</p><ul>\n<p className=\"doc-paragraph\">\t- <code>Window.from</code>: Creates an OSGL window by initializing a new <code>EditableImage</code> instance at the specified location.</p><p className=\"doc-paragraph\">\t- <code>Window.new</code>: Creates an OSGL window from an existing <code>EditableImage</code>.</p><p className=\"doc-paragraph\">\t- <code>Window.fromAssetId</code>: Creates a window given an assetId.</p><p className=\"doc-paragraph\">\t- <code>Window.fromBuffer</code>: Creates a window given a buffer.</p></ul>\n<p className=\"doc-paragraph\">Among the available options, <code>Window.from</code> is the most suitable for our needs. Since we do not have an existing <code>EditableImage</code>, this method will create one at the specified location. The function requires an <code>Image</code>, along with the dimensions of our <code>Window</code>:</p><CodeBlock code={`local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal OSGL = require(ReplicatedStorage.Packages.OSGL)\nlocal Window = OSGL.Window\n\nlocal player = Players.LocalPlayer\nassert(player)\n\nlocal screenGui = player.PlayerGui:WaitForChild(\"ScreenGui\")\nlocal imageLabel = screenGui.ImageLabel\n\n-- Create a Window with a size of 420x420. The size can be customized as needed,\n-- but it does not have to match the size of the ImageLabel. Note that Windows\n-- cannot exceed the maximum size of 1024x1024.\nlocal window = Window.new(imageLabel, 420, 420)`}></CodeBlock><p className=\"doc-paragraph\">It's a good idea to use constants instead of hardcoded width and height numbers because we could be referring to these values a couple of times in the future:</p><CodeBlock code={`local WIDTH = 420\nlocal HEIGHT = 420\n\nlocal window = Window.new(imageLabel, WIDTH, HEIGHT)`}></CodeBlock><p className=\"doc-paragraph\">Your full code should now look something like this:</p><CodeBlock code={`local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal OSGL = require(ReplicatedStorage.OSGL)\nlocal Window = OSGL.Window\n\nlocal player = Players.LocalPlayer\nassert(player)\n\n-- Dimensions\nlocal WIDTH = 420\nlocal HEIGHT = 420\n\nlocal screenGui = player.PlayerGui:WaitForChild(\"ScreenGui\")\nlocal imageLabel = screenGui.ImageLabel\n\n-- Create the window\nlocal window = Window.new(imageLabel, WIDTH HEIGHT)`}></CodeBlock>\n<h2 className=\"doc-header\">Error Handling</h2><p className=\"doc-paragraph\">OSGL uses a <code>Result</code> pattern for operations that might fail. This helps catch issues early:</p><CodeBlock code={`-- ...\n\nlocal window = Window.new(imageLabel, WIDTH HEIGHT)\nif not window.isOk then\n    -- OSGL returns errors as Enums (OSGL.Enum).\n    -- This means that the error message will be a number.\n    -- You can see what these values mean in the API reference.\n    local errorMessage = window:UnwrapErr()\n    warn(\"Failed to create window:\", errorMessage)\n    return\nend\n\n-- If we get here, the window is safe to use\nlocal myWindow = window:Unwrap()`}></CodeBlock><p className=\"doc-paragraph\">With the new <code>myWindow</code> object, all of the methods of a <code>Window</code> can now be accessed. For now, clear the screen with a <code>BLACK</code> color. Import OSGLs <code>color</code> module, and use the <code>Clear</code> method of <code>Window</code>:</p><CodeBlock code={`-- ...\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\n-- ...\n\nlocal myWindow = window:Unwrap()\n\n-- Use the constant \\`BLACK\\`\nmyWindow:Clear(color.BLACK)`}></CodeBlock><p className=\"doc-paragraph\">This isn't all; OSGL won't render your changes to the screen until you call either <code>Render</code> or <code>RenderTargetFPS</code>:</p><CodeBlock code={`-- ...\n\nlocal myWindow = window:Unwrap()\n\n-- Use the constant \\`BLACK\\`\nmyWindow:Clear(color.BLACK)\nmyWindow:Render()`}></CodeBlock><p className=\"doc-paragraph\">Joining the game, you should now see that the entire <code>Window</code> has been colored black (as it was cleared)! This means your code has worked. You can view the full code here for reference, or you can see the <b className=\"doc-paragraph\">01-BlackScreen</b> example:</p><CodeBlock code={`local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\nlocal Players = game:GetService(\"Players\")\n\nlocal OSGL = require(ReplicatedStorage.OSGL)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal player = Players.LocalPlayer\nassert(player)\n\n-- Dimensions\nlocal WIDTH = 420\nlocal HEIGHT = 420\n\nlocal screenGui = player.PlayerGui:WaitForChild(\"ScreenGui\")\nlocal imageLabel = screenGui.ImageLabel\n\n-- Create the window\nlocal window = Window.new(imageLabel, WIDTH HEIGHT)\nif not window.isOk then\n    -- OSGL returns errors as Enums (OSGL.Enum).\n    -- This means that the error message will be a number.\n    -- You can see what these values mean in the API reference.\n    local errorMessage = window:UnwrapErr()\n    warn(\"Failed to create window:\", errorMessage)\n    return\nend\n\n-- If we get here, the window is safe to use\nlocal myWindow = window:Unwrap()\n\n-- Use the constant \\`BLACK\\`\nmyWindow:Clear(color.BLACK)\nmyWindow:Render() -- Render our changes`}></CodeBlock><p className=\"doc-paragraph\"><ImageViewer src=\"\\rendering-to-a-window\\black-render.png\" /></p>\n<div style={{ height: \"55px\" }} />\n</div>\n\n      <Footer />\n      <div className=\"grid-background-dark\"></div>\n    </div>\n  );\n};\n\nexport default File;"],"names":["_ref","sections","openSections","setOpenSections","useState","animationStates","setAnimationStates","currentPath","setCurrentPath","window","location","pathname","useEffect","handleLocationChange","addEventListener","removeEventListener","_jsx","className","children","map","section","index","isSectionActive","startsWith","id","_jsxs","onClick","prev","setTimeout","toggleSection","title","style","color","transform","links","link","linkIndex","isLinkActive","href","animationDelay","text","code","language","filename","hljs","registerLanguage","require","copied","setCopied","codeRef","useRef","current","highlightElement","ref","copyToClipboard","navigator","clipboard","writeText","then","catch","err","console","error","src","alt","isOpen","setIsOpen","isVisible","setIsVisible","handleKeyDown","e","key","closeLightbox","document","_Fragment","stopPropagation","DocTopbar","height","position","TopbarOneWayButton","name","marginLeft","TopbarButton","File","Sidebar","sidebarInfo","CodeBlock","ImageViewer","class","Footer"],"sourceRoot":""}