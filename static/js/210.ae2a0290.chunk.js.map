{"version":3,"file":"static/js/210.ae2a0290.chunk.js","mappings":"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","sources":["docs/components/sidebar.js","docs/components/codeblock.js","docs/components/image-viewer.js","docs/pages/advanced/serialization.js","docs/components/doc-topbar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Sidebar = ({ sections }) => {\r\n  const [openSections, setOpenSections] = useState({});\r\n  const [animationStates, setAnimationStates] = useState({});\r\n  const [currentPath, setCurrentPath] = useState(window.location.pathname);\r\n\r\n  useEffect(() => {\r\n    const handleLocationChange = () => {\r\n      setCurrentPath(window.location.pathname);\r\n    };\r\n\r\n    window.addEventListener('popstate', handleLocationChange);\r\n    return () => window.removeEventListener('popstate', handleLocationChange);\r\n  }, []);\r\n\r\n  const toggleSection = (section) => {\r\n    if (openSections[section]) {\r\n      setAnimationStates((prev) => ({ ...prev, [section]: 'fade-out' }));\r\n      setTimeout(() => {\r\n        setOpenSections((prev) => ({ ...prev, [section]: false }));\r\n        setAnimationStates((prev) => ({ ...prev, [section]: '' }));\r\n      }, 300);\r\n    } else {\r\n      setOpenSections((prev) => ({ ...prev, [section]: true }));\r\n      setAnimationStates((prev) => ({ ...prev, [section]: 'fade-in' }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n      {sections.map((section, index) => {\r\n        const isSectionActive = currentPath.startsWith(`/${section.id}`);\r\n        return (\r\n          <div key={index} className=\"sidebar-section\">\r\n            <div \r\n              className=\"section-header\" \r\n              onClick={() => toggleSection(section.title)}\r\n            >\r\n              <span style={{ color: isSectionActive ? '#446EE4' : 'white' }}>\r\n                {section.title}\r\n              </span>\r\n              <span \r\n                className=\"toggle-icon\" \r\n                style={{ transform: openSections[section.title] ? 'rotate(90deg)' : 'rotate(0deg)' }}\r\n              >\r\n                â–º\r\n              </span>\r\n            </div>\r\n\r\n            {openSections[section.title] && (\r\n              <div className={`sub-sections ${animationStates[section.title]}`}>\r\n                {section.links.map((link, linkIndex) => {\r\n                  const isLinkActive = currentPath === link.href;\r\n                  return (\r\n                    <a \r\n                      key={linkIndex} \r\n                      href={link.href} \r\n                      className=\"sub-section-link\"\r\n                      style={{ \r\n                        animationDelay: `${linkIndex * 0.1}s`,\r\n                        color: isLinkActive ? '#446EE4' : '#c2c7d6',\r\n                      }}\r\n                    >\r\n                      {link.text}\r\n                    </a>\r\n                  );\r\n                })}\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;","import React, { useState, useEffect, useRef } from \"react\";\r\nimport hljs from \"highlight.js\";\r\nimport \"highlight.js/styles/github-dark.css\";\r\nimport '../Docs.css'; // Import your CSS file\r\n\r\nconst CodeBlock = ({ code, language = \"lua\", filename }) => {\r\n    useEffect(() => {\r\n        hljs.registerLanguage('lua', require('highlight.js/lib/languages/lua'));\r\n    }, []);\r\n\r\n    const [copied, setCopied] = useState(false);\r\n    const codeRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (codeRef.current) {\r\n            hljs.highlightElement(codeRef.current);\r\n        }\r\n    }, [code]);\r\n\r\n    const copyToClipboard = () => {\r\n        navigator.clipboard.writeText(code)\r\n            .then(() => {\r\n                setCopied(true);\r\n                setTimeout(() => setCopied(false), 1500);\r\n            })\r\n            .catch(err => console.error(\"Copy failed:\", err));\r\n    };\r\n\r\n    return (\r\n        <div className=\"code-block-container\">\r\n            {filename && (\r\n                <div className=\"filename\">\r\n                    <p className=\"doc-paragraph\">{filename}</p>\r\n                </div>\r\n            )}\r\n\r\n            {/* Code block */}\r\n            <pre className=\"code-block\">\r\n                <code ref={codeRef} className={`language-${language}`}>\r\n                    {code}\r\n                </code>\r\n            </pre>\r\n\r\n            {/* Copy button */}\r\n            <button \r\n                className={`copy-btn ${copied ? \"copied\" : \"\"}`}\r\n                onClick={copyToClipboard}\r\n            >\r\n                {copied ? \"Copied!\" : \"Copy\"}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CodeBlock;","import React, { useState, useEffect } from \"react\";\r\n\r\nconst ImageViewer = ({ src, alt = \"Image\", className = \"\" }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isVisible, setIsVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            // Delay adding \"visible\" class for fade-in effect\r\n            setTimeout(() => setIsVisible(true), 10);\r\n        } else {\r\n            // Start fade-out animation\r\n            setIsVisible(false);\r\n        }\r\n    }, [isOpen]);\r\n\r\n    useEffect(() => {\r\n        const handleKeyDown = (e) => {\r\n            if (e.key === \"Escape\") closeLightbox();\r\n        };\r\n        document.addEventListener(\"keydown\", handleKeyDown);\r\n        return () => document.removeEventListener(\"keydown\", handleKeyDown);\r\n    }, []);\r\n\r\n    const closeLightbox = () => {\r\n        setIsVisible(false); // Start fade-out animation\r\n        setTimeout(() => setIsOpen(false), 300); // Wait for animation to finish before removing from DOM\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* Small Image */}\r\n            <img \r\n                src={\"/osgl\" + src} \r\n                alt={alt} \r\n                className={`image-thumbnail ${className}`}\r\n                onClick={() => setIsOpen(true)}\r\n            />\r\n\r\n            {/* Fullscreen Lightbox */}\r\n            {isOpen && (\r\n                <div className={`image-overlay ${isVisible ? \"visible\" : \"\"}`} onClick={closeLightbox}>\r\n                    <div className={`image-container ${isVisible ? \"visible\" : \"\"}`} onClick={(e) => e.stopPropagation()}>\r\n                        {/* Close Button */}\r\n                        <button className=\"close-button\" onClick={closeLightbox}>âœ•</button>\r\n\r\n                        {/* Enlarged Image */}\r\n                        <img src={\"/osgl\" + src} alt={alt} className=\"enlarged-image\" />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ImageViewer;","// THIS FILE HAS BEEN AUTOMATICALLY GENERATED AND IS NOT INTENDED TO BE READ\r\nimport React from \"react\";\r\nimport '../../Docs.css';\r\nimport Footer from \"../../../components/footer\";\r\nimport DocTopbar from \"../../components/doc-topbar\";\r\nimport CodeBlock from \"../../components/codeblock\";\r\nimport ImageViewer from \"../../components/image-viewer\";\r\nimport Sidebar from \"../../components/sidebar\";\r\nimport '../../flavours/note.css';\r\nimport '../../flavours/warn.css';\r\nimport '../../flavours/important.css';\r\nimport sidebarInfo from \"../../sidebar-info\";\r\nimport \"../../../css/sidebar.css\";\r\nconst File = () => {\r\n  return (\r\n    <div className=\"Docs\">\r\n      <title>Docs | OSGL</title>\r\n      <DocTopbar />\r\n      \r\n      <div className=\"sidebar-content\">\r\n        <Sidebar sections={sidebarInfo} />\r\n      </div>\r\n      <div className=\"doc-content\">{/* This file was automatically-generated */}\r\n\r\n<h1 className=\"doc-header\">Serializing & Deserializing</h1>\r\n<div className=\"doc-header-line\"></div><p className=\"doc-paragraph\">OSGL simplifies the process of saving and loading your <code>Window</code>s and <a className=\"doc-paragraph\" href=\"/osgl/docs/textures/loading\">Textures</a> without encountering <code>buffer</code> errors. This process, known as <b className=\"doc-paragraph\">serialization</b> and <b className=\"doc-paragraph\">deserialization</b>, ensures smooth data transfer.</p>\r\n<h3 className=\"doc-header\">Why Serialize and Deserialize?</h3><p className=\"doc-paragraph\">Consider a scenario where you have two <code>Window</code>s: Window A and Window B. You want to copy the contents of <code>A</code> into <code>B</code>. Typically, you might do something like this:</p><CodeBlock code={`local B = Window.fromBuffer(A.buffer, width, height)`}></CodeBlock><p className=\"doc-paragraph\">However, if <code>B</code> is not the same size as <code>A</code>, an error will occur. This is where <b className=\"doc-paragraph\">serialization</b> and <b className=\"doc-paragraph\">deserialization</b> become useful. You can <b className=\"doc-paragraph\">serialize</b> a <code>Window</code> and <b className=\"doc-paragraph\">deserialize</b> it into another <code>Window</code> or even a <code>Texture</code>:</p><CodeBlock code={`local A = Window.from(parent, 50, 50):Unwrap()\r\n\r\n-- Draw a texture to \\`A\\`\r\nlocal txt = Texture.fromAssetId(14419725604):Unwrap()\r\nTexture.drawChecked(A, txt, 0, 0)\r\n\r\n-- Serialize \\`A\\` to get its buffer, width, and height\r\nlocal bfr, w, h = A:Serialize()\r\n\r\nlocal B = Window.from(parentTwo, 2, 10):Unwrap()\r\n\r\n-- Resize \\`B\\` to match \\`A\\`'s dimensions and paste the contents\r\nB:Deserialize(bfr, w, h)\r\n\r\n-- Now \\`B\\` has the same size and contents as \\`A\\`\r\nB:Render()`}></CodeBlock>\r\n<h3 className=\"doc-header\">Understanding the Difference</h3><p className=\"doc-paragraph\">If you are certain about the sizes of the <code>Window</code>s, you can use <code>fromBuffer</code>. However, if you are unsure or need to resize dynamically, it is advisable to use <code>Deserialize</code>. The <code>Deserialize</code> function safely scales the size of the buffer. Directly setting the <code>buffer</code> to another buffer may cause size errors! It's always safer to use <code>Deserialize</code>, however if you are confident that both <code>buffer</code>s will always be the same size, you can directly set the buffer via:</p><CodeBlock code={`A.buffer = B.buffer`}></CodeBlock>\r\n<h3 className=\"doc-header\">Serializing Textures</h3><p className=\"doc-paragraph\"><code>Texture</code>s can also be serialized:</p><CodeBlock code={`local txt = texture.fromAssetId(14419725604)\r\nlocal bfr, w, h = txt:Serialize()\r\n\r\n-- Create a new window with the texture's contents\r\nlocal window = Window.fromBuffer(bfr, w, h):Unwrap()\r\n\r\n-- Alternatively, use \\`Deserialize\\` to update an existing window:\r\nlocal secondWindow = -- *reference to a window*\r\nsecondWindow:Deserialize(bfr, w, h)`}></CodeBlock>\r\n<h3 className=\"doc-header\">Saving and Loading Example</h3><p className=\"doc-paragraph\">Here is an example of how you can save and load the state of a <code>Window</code> using serialization and deserialization:</p><CodeBlock code={`-- Save.luau\r\nlocal bfr, width, height = windowOne:Serialize()\r\n-- *save data*\r\n\r\n-- Load.luau\r\nlocal bfr, width, height = -- *load data*\r\nwindowTwo:Deserialize(bfr, width, height)`}></CodeBlock><p className=\"doc-paragraph\">In summary, while serialization and deserialization are powerful functions for managing <code>Window</code>s and <code>Texture</code>s, there are times when directly setting the buffer with <code>A.buffer = B.buffer</code> might be more convenient. This approach can be useful when you are certain that the sizes of the buffers match, as it avoids the need to handle potential performance issues / resizing issues that come with deserialization.</p>\r\n      <div style={{ height: \"55px\" }} />\r\n</div>\r\n      <Footer />\r\n      <div className=\"grid-background-dark\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default File;","import React from \"react\";\r\nimport TopbarButton from \"../../components/topbar-button\";\r\nimport TopbarOneWayButton from \"../../components/topbar-one-way-button\";\r\n\r\nconst DocTopbar = () => {\r\n    return <div className=\"topbar\" style={{height: \"55px\", position: \"fixed\" }}>\r\n        <TopbarOneWayButton name=\"logo\" link=\"/osgl\" />\r\n\r\n        <div className=\"docs-sig\">\r\n            <img\r\n                src=\"/osgl/docs-colour.png\"\r\n                alt=\"docs\"\r\n                className=\"docs-img\"\r\n            />\r\n        </div>\r\n\r\n        <img src=\"/osgl/logo-sep.png\" alt=\"Separator\" className=\"seperator-img\" style={{marginLeft: \"75px\"}} />\r\n\r\n        <TopbarButton name=\"api\" link=\"/osgl/api\" />\r\n        <TopbarButton name=\"github\" link=\"https://github.com/osgl-rbx/osgl/\" />\r\n    </div>\r\n}\r\n\r\nexport default DocTopbar;"],"names":["_ref","sections","openSections","setOpenSections","useState","animationStates","setAnimationStates","currentPath","setCurrentPath","window","location","pathname","useEffect","handleLocationChange","addEventListener","removeEventListener","_jsx","className","children","map","section","index","isSectionActive","startsWith","id","_jsxs","onClick","prev","setTimeout","toggleSection","title","style","color","transform","links","link","linkIndex","isLinkActive","href","animationDelay","text","code","language","filename","hljs","registerLanguage","require","copied","setCopied","codeRef","useRef","current","highlightElement","ref","copyToClipboard","navigator","clipboard","writeText","then","catch","err","console","error","src","alt","isOpen","setIsOpen","isVisible","setIsVisible","handleKeyDown","e","key","closeLightbox","document","_Fragment","stopPropagation","File","DocTopbar","Sidebar","sidebarInfo","CodeBlock","height","Footer","position","TopbarOneWayButton","name","marginLeft","TopbarButton"],"sourceRoot":""}