{"version":3,"file":"static/js/43.7815e185.chunk.js","mappings":"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","sources":["api/pages/texture.js","api/components/type-highlighter.js","api/components/api-type.js"],"sourcesContent":["import React from \"react\";\r\nimport '../Api.css';\r\nimport Footer from \"../../components/footer\";\r\nimport APITopbar from \"../components/api-topbar\";\r\nimport Sidebar from \"../components/sidebar\";\r\nimport \"../css/api-sidebar.css\";\r\nimport Type from \"../components/api-type\";\r\nimport Prop from \"../components/api-prop\";\r\nimport Func from \"../components/api-function\";\r\nimport SidebarInfo from \"../sidebar-info\";\r\nimport ClassMeta from \"../components/class-meta\";\r\n\r\nconst Texture = () => {\r\n    return (\r\n        <div className=\"API\">\r\n            <title>API | OSGL</title>\r\n            <APITopbar />\r\n\r\n            <div className=\"sidebar-content\">\r\n                <Sidebar links={SidebarInfo} />\r\n            </div>\r\n\r\n            <div className=\"api-content\">\r\n                <h1 className=\"api-header\">Texture</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <ClassMeta metadata={{\r\n                    inherits: [\"DrawableObject\"],\r\n                    core: true,\r\n                    partialThreadSafe: true,\r\n                }} />\r\n\r\n                <p className=\"api-paragraph\">The Texture class handles the loading and drawing of all Texture instances.</p>\r\n\r\n                <h1 className=\"api-header\">Types</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <Type\r\n                    name=\"BaseRawTexture\"\r\n                    type={{\r\n                        version: \"string\",\r\n                        width: \"number\",\r\n                        height: \"number\",\r\n                        pixels: \"buffer\"\r\n                    }}\r\n                />\r\n\r\n                <Type\r\n                    name=\"BaseUnloadedTexture\"\r\n                    type={{\r\n                        version: \"'1.6b'\",\r\n                        width: \"number\",\r\n                        height: \"number\",\r\n                        pixels: \"buffer\"\r\n                    }}\r\n                />\r\n                <Type\r\n                    name=\"RawTexture\"\r\n                    type=\"ModuleScript | BaseUnloadedTexture\"\r\n                />\r\n\r\n                <h1 className=\"api-header\">Functions</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <Func\r\n                    name=\"fromChecked\"\r\n                    fullName=\"Texture.fromChecked\"\r\n                    params={{\r\n                        rawTexture: \"RawTexture\",\r\n                    }}\r\n                    returnType=\"Result<Texture, TextureError>\"\r\n                    desc=\"Creates a new Texture given a raw one.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Texture = OSGL.Texture\r\n\r\nlocal myTexture = Texture.fromChecked(script.myTextureModulescript)`}\r\n                    metadata={{\r\n                        Checked: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"fromUnchecked\"\r\n                    fullName=\"Texture.fromUnchecked\"\r\n                    params={{\r\n                        rawTexture: \"BaseUnloadedTexture\",\r\n                    }}\r\n                    returnType=\"Texture\"\r\n                    desc=\"Creates a new Texture given an unloaded one.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Texture = OSGL.Texture\r\n\r\nlocal textureData = require(script.myTextureModulecript)\r\n\r\nlocal myTexture = Texture.fromUnchecked(textureData)`}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                    }}\r\n                />\r\n\r\n<Func\r\n                    name=\"fromAssetId\"\r\n                    fullName=\"Texture.fromAssetId\"\r\n                    params={{\r\n                        assetId: \"string\",\r\n                    }}\r\n                    returnType=\"Result<Texture, TextureError>\"\r\n                    desc=\"Creates a new Texture given an asset id.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Texture = OSGL.Texture\r\n\r\nlocal texture = Texture.fromAssetId(\"rbxassetid://ID\"):Unwrap()`}\r\n                    metadata={{\r\n                        Checked: true,\r\n                    }}\r\n                />\r\n\r\n<Func\r\n                    name=\"fromCanvasDrawSaveObject\"\r\n                    fullName=\"Texture.fromCanvasDrawSaveObject\"\r\n                    params={{\r\n                        saveObject: \"Instance\",\r\n                        slowLoad: {\r\n                            type: \"boolean?\",\r\n                            comment: \"Only available for versions V4.9.0+\"\r\n                        }\r\n                    }}\r\n                    returnType=\"Result<Texture, TextureError>\"\r\n                    desc=\"Loads a CanvasDraw SaveObject of any\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Texture = OSGL.Texture\r\n\r\nlocal saveObject = script.mySaveObject\r\nlocal myTexture = Texture.fromCanvasDrawSaveObject(saveObject)`}\r\n                    metadata={{\r\n                        Checked: true,\r\n                    }}\r\n                />\r\n\r\n<Func\r\n                    name=\"new\"\r\n                    fullName=\"Texture.new\"\r\n                    params={{\r\n                        width: \"width\",\r\n                        height: \"height\",\r\n                        buffer: \"buffer?\",\r\n                    }}\r\n                    returnType=\"Result<Texture, DrawableError>\"\r\n                    desc=\"Creates a new Texture given a buffer, along with its dimensions.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Texture = OSGL.Texture\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel\r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\n\r\n-- Only errors if WIDTH * HEIGHT * 4 ~= length of the buffer provided\r\nlocal texture = Texture.new(WIDTH, HEIGHT, window.buffer):Unwrap()`}\r\n                    metadata={{\r\n                        Checked: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"serializeChecked\"\r\n                    fullName=\"Texture.serializeChecked\"\r\n                    params={{\r\n                        rawTexture: \"RawTexture\",\r\n                    }}\r\n                    returnType=\"Result<(buffer, number, number), TextureError>\"\r\n                    desc=\"Serializes a raw texture.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Texture = OSGL.Texture\r\n\r\nlocal txt = Texture.serializeChecked(script.myTextureModulescript)`}\r\n                    metadata={{\r\n                        Checked: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"serializeUnchecked\"\r\n                    fullName=\"Texture.serializeUnchecked\"\r\n                    params={{\r\n                        rawTexture: \"BaseUnloadedTexture\",\r\n                    }}\r\n                    returnType=\"buffer, number, number\"\r\n                    desc=\"Serializes an unloaded texture.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Texture = OSGL.Texture\r\n\r\nlocal textureData = require(script.myTextureModulescript)\r\n\r\nlocal buffer, width, height = Texture.serializeUnchecked(textureData)`}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"drawChecked\"\r\n                    fullName=\"Texture.drawChecked\"\r\n                    params={{\r\n                        object: \"DrawableObject\",\r\n                        texture: \"Texture\",\r\n                        x: \"number\",\r\n                        y: \"number\",\r\n                        rotation: \"number?\"\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Draws a Texture somewhere if in-bound.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Texture = OSGL.Texture\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel\r\nlocal myWindow = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\n\r\nlocal myTexture = Texture.fromChecked(script.myTextureModulescript):Unwrap()\r\nTexture.DrawChecked(myWindow, myTexture, 0, 0)`}\r\n                    metadata={{\r\n                        Checked: true,\r\n                    }}\r\n                />\r\n\r\n<Func\r\n                    name=\"drawUnchecked\"\r\n                    fullName=\"Texture.drawUnchecked\"\r\n                    params={{\r\n                        object: \"DrawableObject\",\r\n                        texture: \"Texture\",\r\n                        x: \"number\",\r\n                        y: \"number\",\r\n                        rotation: \"number?\"\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Draws a Texture somewhere.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Texture = OSGL.Texture\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel\r\nlocal myWindow = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\n\r\nlocal myTexture = Texture.fromChecked(script.myTextureModulescript):Unwrap()\r\nTexture.DrawUnchecked(myWindow, myTexture, 0, 0)`}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                    }}\r\n                />\r\n\r\n                <div style={{ height: \"55px\" }} />\r\n            </div>\r\n            <Footer />\r\n            <div className=\"grid-background-dark\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Texture;\r\n","import React from \"react\";\r\nimport { highlightType } from \"./function-highlighter\";\r\n\r\nconst SyntaxHighlighter = ({ name, definition }) => {\r\n  const highlightSyntax = (code) => {\r\n    return code\r\n      .replace(/\\b(type)\\b/g, '<span class=\"keyword\">$1</span>')\r\n      .replace(/(--.*)$/gm, '<span class=\"comment\">$1</span>');\r\n  };\r\n\r\n  const highlightTypeDefinition = (typeDef) => {\r\n    const parts = typeDef.split(/([&|])/);\r\n    \r\n    return parts.map((part, _) => {\r\n      if (part === '&' || part === '|') {\r\n        return part;\r\n      }\r\n\r\n      const whitespaceBefore = part.match(/^\\s*/)[0];\r\n      const whitespaceAfter = part.match(/\\s*$/)[0];\r\n      return `${whitespaceBefore}${highlightType(part.trim())}${whitespaceAfter}`;\r\n    }).join('');\r\n  };\r\n\r\n  let output = \"\";\r\n\r\n  if (typeof definition === \"string\") {\r\n    const baseType = definition.replace(/\\?$/, \"\");\r\n    const isOptional = definition.endsWith(\"?\");\r\n    const highlightedType = highlightTypeDefinition(baseType);\r\n    output = `type ${name} = ${highlightedType}${isOptional ? \"?\" : \"\"};`;\r\n  } else if (typeof definition === \"object\") {\r\n    const formattedProps = Object.entries(definition)\r\n      .map(([key, value]) => {\r\n        let type = \"\";\r\n        let comment = \"\";\r\n\r\n        if (typeof value === \"string\") {\r\n          type = highlightTypeDefinition(value.replace(/\\?$/, \"\")) + \r\n                (value.endsWith(\"?\") ? \"?\" : \"\");\r\n        } else if (typeof value === \"object\" && value.type) {\r\n          type = highlightTypeDefinition(value.type.replace(/\\?$/, \"\")) + \r\n                (value.type.endsWith(\"?\") ? \"?\" : \"\");\r\n          comment = value.comment ? ` -- ${value.comment}` : \"\";\r\n        }\r\n\r\n        return `    ${key}: ${type};${comment}`;\r\n      })\r\n      .join(\"\\n\");\r\n\r\n    output = `type ${name} = {\\n${formattedProps}\\n}`;\r\n  } else {\r\n    output = \"/* Invalid Input */\";\r\n  }\r\n\r\n  return (\r\n    <pre className=\"output\" dangerouslySetInnerHTML={{ __html: highlightSyntax(output) }} />\r\n  );\r\n};\r\n\r\nexport default SyntaxHighlighter;","import React, { useEffect } from \"react\";\r\nimport SyntaxHighlighter from \"./type-highlighter\";\r\nimport CodeBlock from \"../../docs/components/codeblock\";\r\n\r\nconst Type = ({ name, type, code }) => {\r\n    const id = name.replace(/\\s+/g, \"-\").toLowerCase();\r\n\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            if (window.location.hash === `#${id}`) {\r\n                const element = document.getElementById(id);\r\n                if (element) {\r\n                    element.scrollIntoView({\r\n                        behavior: \"smooth\",\r\n                        block: \"center\",\r\n                    });\r\n                }\r\n            }\r\n        };\r\n\r\n        handleScroll();\r\n\r\n        window.addEventListener(\"hashchange\", handleScroll);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"hashchange\", handleScroll);\r\n        };\r\n    }, [id]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <code id={id} className=\"api-name-header\">{name}</code>\r\n            <br />\r\n            <SyntaxHighlighter name={name} definition={type} />\r\n            {code && (\r\n                <div className=\"code-block\">\r\n                    <CodeBlock code={code} language=\"lua\" />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Type;"],"names":["Texture","_jsxs","className","children","_jsx","APITopbar","Sidebar","links","SidebarInfo","ClassMeta","metadata","inherits","core","partialThreadSafe","Type","name","type","version","width","height","pixels","Func","fullName","params","rawTexture","returnType","desc","code","Checked","Unchecked","assetId","saveObject","slowLoad","comment","buffer","object","texture","x","y","rotation","style","Footer","_ref","definition","highlightTypeDefinition","typeDef","split","map","part","_","whitespaceBefore","match","whitespaceAfter","highlightType","trim","join","output","baseType","replace","isOptional","endsWith","Object","entries","_ref2","key","value","dangerouslySetInnerHTML","__html","id","toLowerCase","useEffect","handleScroll","window","location","hash","element","document","getElementById","scrollIntoView","behavior","block","addEventListener","removeEventListener","SyntaxHighlighter","CodeBlock","language"],"sourceRoot":""}