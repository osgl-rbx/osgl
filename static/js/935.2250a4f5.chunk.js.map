{"version":3,"file":"static/js/935.2250a4f5.chunk.js","mappings":"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","sources":["api/pages/drawable-object.js"],"sourcesContent":["import React from \"react\";\r\nimport '../Api.css';\r\nimport Footer from \"../../components/footer\";\r\nimport APITopbar from \"../components/api-topbar\";\r\nimport Sidebar from \"../components/sidebar\";\r\nimport \"../css/api-sidebar.css\";\r\nimport Prop from \"../components/api-prop\";\r\nimport Func from \"../components/api-function\";\r\nimport SidebarInfo from \"../sidebar-info\";\r\nimport ClassMeta from \"../components/class-meta\";\r\n\r\nconst DrawableObject = () => {\r\n    return (\r\n        <div className=\"API\">\r\n            <title>API | OSGL</title>\r\n            <APITopbar />\r\n\r\n            <div className=\"sidebar-content\">\r\n                <Sidebar links={SidebarInfo} />\r\n            </div>\r\n\r\n            <div className=\"api-content\">\r\n                <h1 className=\"api-header\">DrawableObject</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <ClassMeta metadata={{\r\n                    core: true,\r\n                    abstract: true,\r\n                    partialThreadSafe: true,\r\n                }} />\r\n\r\n                <p className=\"api-paragraph\">All objects that can be drawn to in OSGL inherit from this class.</p>\r\n\r\n                <h1 className=\"api-header\">Properties</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <Prop name=\"buffer\" fullName=\"Object.buffer\" type=\"buffer\" desc=\"Represents the pixels of the Object.\" />\r\n                <Prop name=\"width\" fullName=\"Object.width\" type=\"number\" desc=\"The width of the object.\" />\r\n                <Prop name=\"height\" fullName=\"Object.height\" type=\"number\" desc=\"The height of the object.\" />\r\n                <Prop name=\"size\" fullName=\"Object.size\" type=\"Vector2\" desc=\"A Vector2 representing the width and height of the object.\" />\r\n\r\n                <h1 className=\"api-header\">Methods</h1>\r\n                <div className=\"api-header-line\"></div>\r\n\r\n                <Func\r\n                    name=\"Resize\"\r\n                    fullName=\"Object:Resize\"\r\n                    params={{\r\n                        width: \"number\",\r\n                        height: \"number\",\r\n                    }}\r\n                    returnType=\"Result<nil, DrawableError>\"\r\n                    desc=\"Resizes the Object to the given width and height.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Resize(250, 250)`}\r\n                    isMethod={true}\r\n                />\r\n\r\n                <Func\r\n                    name=\"Serialize\"\r\n                    fullName=\"Object:Serialize\"\r\n                    params={{}}\r\n                    returnType=\"(buffer, number, number)\"\r\n                    desc=\"Serializes the object into a buffer, along with its dimensions.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nlocal bfr, width, height = window:Serialize()`}\r\n                    isMethod={true}\r\n                />\r\n\r\n                <Func\r\n                    name=\"Deserialize\"\r\n                    fullName=\"Object:Deserialize\"\r\n                    params={{\r\n                        buffer: \"buffer\",\r\n                        width: \"number\",\r\n                        height: \"number\"\r\n                    }}\r\n                    returnType=\"Result<nil, DrawableError>\"\r\n                    desc=\"Deserializes a serialized buffer with its dimensions onto the Object\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal image2 = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nlocal window2 = Window.from(image, WIDTH * 2, HEIGHT * 2):Unwrap()\r\nlocal bfr, width, height = window:Serialize()\r\n\r\n-- Copy the content of \"window\" onto \"window2\"\r\nwindow2:Deserialize(bfr, width, height)`}\r\n                    isMethod={true}\r\n                />\r\n\r\n                <Func\r\n                    name=\"ReadPixelChecked\"\r\n                    fullName=\"Object:ReadPixelChecked\"\r\n                    params={{\r\n                        x: \"number\",\r\n                        y: \"number\"\r\n                    }}\r\n                    returnType=\"Result<Color, DrawableError>\"\r\n                    desc=\"Returns the color of the given pixel, if in bound.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Clear()\r\n\r\nprint(window:ReadPixelChecked(55, 55).isOk) -- false`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Checked: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"ReadPixelUnchecked\"\r\n                    fullName=\"Object:ReadPixelUnchecked\"\r\n                    params={{\r\n                        x: \"number\",\r\n                        y: \"number\"\r\n                    }}\r\n                    returnType=\"Color\"\r\n                    desc=\"Returns the color of the given pixel.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Clear()\r\n\r\nprint(window:ReadPixelUnchecked(40, 40)) -- Color`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                    }}\r\n                ></Func>\r\n\r\n                <Func\r\n                    name=\"TintRegionChecked\"\r\n                    fullName=\"Object:TintRegionChecked\"\r\n                    params={{\r\n                        tint: \"Color\",\r\n                        factor: \"number\",\r\n                        x: \"number\",\r\n                        y: \"number\",\r\n                        width: \"number\",\r\n                        height: \"number\",\r\n                    }}\r\n                    returnType=\"Result<nil, DrawableError>\"\r\n                    desc=\"Tints a section of the Object a certain color if in-bound.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Clear(color.RED)\r\n\r\nprint(window:TintRegionChecked(color.BLUE, .5, 5, 5, 10, 10).isOk) -- true`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Checked: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"TintRegionUnchecked\"\r\n                    fullName=\"Object:TintRegionUnchecked\"\r\n                    params={{\r\n                        tint: \"Color\",\r\n                        factor: \"number\",\r\n                        x: \"number\",\r\n                        y: \"number\",\r\n                        width: \"number\",\r\n                        height: \"number\",\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Tints a section of the Object a certain color if in-bound.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Clear(color.RED)\r\n\r\nwindow:TintRegionUnchecked(color.BLUE, .5, 5, 5, 10, 10)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"Tint\"\r\n                    fullName=\"Object:Tint\"\r\n                    params={{\r\n                        tint: \"Color\",\r\n                        factor: \"number\",\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Tints the entire object.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Clear(color.RED)\r\n\r\nwindow:Tint(.5, color.BLUE)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"Resample\"\r\n                    fullName=\"Object:Resample\"\r\n                    params={{\r\n                        scale: \"number?\"\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Resamples the entire object.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Clear(color.RED)\r\n\r\n-- The scale can be an integer:\r\nwindow:Resample(2)\r\n\r\n-- Or even a decimal value:\r\nwindow:Resample(.5)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                    }}\r\n                />\r\n\r\n\r\n                {/* DRAW FUNCTIONS */}\r\n                <Func\r\n                    name=\"Pixel\"\r\n                    fullName=\"Object:Pixel\"\r\n                    params={{\r\n                        x: \"number\",\r\n                        y: \"number\",\r\n                        color: \"Color\"\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Draws a pixel at the specified location\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Pixel(5, 5, color.BLUE)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                        HotPath: true,\r\n                    }}\r\n                />\r\n\r\n<Func\r\n                    name=\"PixelIndex\"\r\n                    fullName=\"Object:PixelIndex\"\r\n                    params={{\r\n                        index: \"number\",\r\n                        color: \"Color\"\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Draws a pixel at the given index in the buffer. Each pixel has a size of 4 bytes.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\n-- 0, 0\r\nwindow:PixelIndex(0, color.BLUE)\r\n\r\n-- 1, 0\r\nwindow:PixelIndex(4, color.BLUE)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                        HotPath: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"Line\"\r\n                    fullName=\"Object:Line\"\r\n                    params={{\r\n                        startX: \"number\",\r\n                        startY: \"number\",\r\n                        stopX: \"number\",\r\n                        stopY: \"number\",\r\n                        thickness: \"number\",\r\n                        color: \"Color\"\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Draws a line from point A to point B\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Line(5, 5, WIDTH - 6, HEIGHT - 6, 2, color.BLUE)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                        HotPath: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"Rectangle\"\r\n                    fullName=\"Object:Rectangle\"\r\n                    params={{\r\n                        x: \"number\",\r\n                        y: \"number\",\r\n                        width: \"number\",\r\n                        height: \"number\",\r\n                        fill: \"Color?\",\r\n                        stroke: \"Color?\",\r\n                        strokeThickness: \"number?\",\r\n                        rotation: \"number?\"\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Draws a rectangle\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Rectangle(5, 5, 10, 10, color.BLUE)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                        HotPath: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"Polygon\"\r\n                    fullName=\"Object:Polygon\"\r\n                    params={{\r\n                        corners: \"{{number}}\",\r\n                        fill: \"Color\",\r\n                        strokeColor: \"Color?\",\r\n                        strokeThickness: \"number?\"\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Draws a polygon\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal points = {\r\n    { 0, 0 },\r\n    { 5, 10 },\r\n    { 10, 0 },\r\n}\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Polygon(points, color.BLUE)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                        HotPath: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"Triangle\"\r\n                    fullName=\"Object:Triangle\"\r\n                    params={{\r\n                        x1: \"number\",\r\n                        y1: \"number\",\r\n\r\n                        x2: \"number\",\r\n                        y2: \"number\",\r\n\r\n                        x3: \"number\",\r\n                        y3: \"number\",\r\n\r\n                        fill: \"Color?\",\r\n                        stroke: \"Color?\",\r\n                        strokeThickness: \"number?\",\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Draws a triangle\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Triangle(0, 0, 5, 10, 10, 0, color.RED)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                        HotPath: true,\r\n                    }}\r\n                />\r\n\r\n                <Func\r\n                    name=\"Circle\"\r\n                    fullName=\"Object:Circle\"\r\n                    params={{\r\n                        centerX: \"number\",\r\n                        centerY: \"number\",\r\n                        radius: \"number\",\r\n\r\n                        fill: \"Color?\",\r\n                        stroke: \"Color?\",\r\n                        strokeThickness: \"number?\",\r\n                        rotation: { type: \"number?\", comment: \"Only visible at low resolutions.\" },\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Draws a circle\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Cicle(23, 23, 5, color.RED)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                        HotPath: true,\r\n                    }}\r\n                />\r\n\r\n<Func\r\n                    name=\"Buffer\"\r\n                    fullName=\"Object:Buffer\"\r\n                    params={{\r\n                        buffer: \"buffer\",\r\n                        width: \"number\",\r\n                        height: \"number\",\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Draws a buffer\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nlocal window2 = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow2:Cicle(23, 23, 5, color.RED)\r\n\r\n-- Same as serializing and deserializing the Window\r\nwindow:Buffer(window2.buffer, WIDTH, HEIGHT)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        Unchecked: true,\r\n                        HotPath: true,\r\n                    }}\r\n                />\r\n\r\n<Func\r\n                    name=\"Clear\"\r\n                    fullName=\"Object:Clear\"\r\n                    params={{\r\n                        color: \"Color?\"\r\n                    }}\r\n                    returnType=\"nil\"\r\n                    desc=\"Clears all pixels with the given Color, or a transparent one if not provided.\"\r\n                    code={`local OSGL = require(path.to.osgl)\r\nlocal Window = OSGL.Window\r\nlocal color = OSGL.color\r\n\r\nlocal WIDTH, HEIGHT = 50, 50\r\n\r\nlocal image = path.to.imageLabel \r\nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\r\nwindow:Clear(color.RED)`}\r\n                    isMethod={true}\r\n                    metadata={{\r\n                        HotPath: true,\r\n                        Checked: true,\r\n                    }}\r\n                />\r\n\r\n                <div style={{ height: \"55px\" }} />\r\n            </div>\r\n            <Footer />\r\n            <div className=\"grid-background-dark\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DrawableObject;\r\n"],"names":["DrawableObject","_jsxs","className","children","_jsx","APITopbar","Sidebar","links","SidebarInfo","ClassMeta","metadata","core","abstract","partialThreadSafe","Prop","name","fullName","type","desc","Func","params","width","height","returnType","code","isMethod","buffer","x","y","Checked","Unchecked","tint","factor","scale","color","HotPath","index","startX","startY","stopX","stopY","thickness","fill","stroke","strokeThickness","rotation","corners","strokeColor","x1","y1","x2","y2","x3","y3","centerX","centerY","radius","comment","style","Footer"],"sourceRoot":""}