"use strict";(self.webpackChunkosgl_docs=self.webpackChunkosgl_docs||[]).push([[935],{906:(e,o,n)=>{n.r(o),n.d(o,{default:()=>m});n(5043),n(3774);var a=n(929),l=n(9073),i=n(788),r=(n(5613),n(6724)),t=n(6261),c=n(4176),d=n(2840),s=n(579);const m=()=>(0,s.jsxs)("div",{className:"API",children:[(0,s.jsx)("title",{children:"API | OSGL"}),(0,s.jsx)(l.A,{}),(0,s.jsx)("div",{className:"sidebar-content",children:(0,s.jsx)(i.A,{links:c.A})}),(0,s.jsxs)("div",{className:"api-content",children:[(0,s.jsx)("h1",{className:"api-header",children:"DrawableObject"}),(0,s.jsx)("div",{className:"api-header-line"}),(0,s.jsx)(d.A,{metadata:{core:!0,abstract:!0,partialThreadSafe:!0}}),(0,s.jsx)("p",{className:"api-paragraph",children:"All objects that can be drawn to in OSGL inherit from this class."}),(0,s.jsx)("h1",{className:"api-header",children:"Properties"}),(0,s.jsx)("div",{className:"api-header-line"}),(0,s.jsx)(r.A,{name:"buffer",fullName:"Object.buffer",type:"buffer",desc:"Represents the pixels of the Object."}),(0,s.jsx)(r.A,{name:"width",fullName:"Object.width",type:"number",desc:"The width of the object."}),(0,s.jsx)(r.A,{name:"height",fullName:"Object.height",type:"number",desc:"The height of the object."}),(0,s.jsx)(r.A,{name:"size",fullName:"Object.size",type:"Vector2",desc:"A Vector2 representing the width and height of the object."}),(0,s.jsx)("h1",{className:"api-header",children:"Methods"}),(0,s.jsx)("div",{className:"api-header-line"}),(0,s.jsx)(t.A,{name:"Resize",fullName:"Object:Resize",params:{width:"number",height:"number"},returnType:"Result<nil, DrawableError>",desc:"Resizes the Object to the given width and height.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Resize(250, 250)",isMethod:!0}),(0,s.jsx)(t.A,{name:"Serialize",fullName:"Object:Serialize",params:{},returnType:"(buffer, number, number)",desc:"Serializes the object into a buffer, along with its dimensions.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nlocal bfr, width, height = window:Serialize()",isMethod:!0}),(0,s.jsx)(t.A,{name:"Deserialize",fullName:"Object:Deserialize",params:{buffer:"buffer",width:"number",height:"number"},returnType:"Result<nil, DrawableError>",desc:"Deserializes a serialized buffer with its dimensions onto the Object",code:'local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal image2 = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nlocal window2 = Window.from(image, WIDTH * 2, HEIGHT * 2):Unwrap()\nlocal bfr, width, height = window:Serialize()\n\n-- Copy the content of "window" onto "window2"\nwindow2:Deserialize(bfr, width, height)',isMethod:!0}),(0,s.jsx)(t.A,{name:"ReadPixelChecked",fullName:"Object:ReadPixelChecked",params:{x:"number",y:"number"},returnType:"Result<Color, DrawableError>",desc:"Returns the color of the given pixel, if in bound.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Clear()\n\nprint(window:ReadPixelChecked(55, 55).isOk) -- false",isMethod:!0,metadata:{Checked:!0}}),(0,s.jsx)(t.A,{name:"ReadPixelUnchecked",fullName:"Object:ReadPixelUnchecked",params:{x:"number",y:"number"},returnType:"Color",desc:"Returns the color of the given pixel.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Clear()\n\nprint(window:ReadPixelUnchecked(40, 40)) -- Color",isMethod:!0,metadata:{Unchecked:!0}}),(0,s.jsx)(t.A,{name:"TintRegionChecked",fullName:"Object:TintRegionChecked",params:{tint:"Color",factor:"number",x:"number",y:"number",width:"number",height:"number"},returnType:"Result<nil, DrawableError>",desc:"Tints a section of the Object a certain color if in-bound.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Clear(color.RED)\n\nprint(window:TintRegionChecked(color.BLUE, .5, 5, 5, 10, 10).isOk) -- true",isMethod:!0,metadata:{Checked:!0}}),(0,s.jsx)(t.A,{name:"TintRegionUnchecked",fullName:"Object:TintRegionUnchecked",params:{tint:"Color",factor:"number",x:"number",y:"number",width:"number",height:"number"},returnType:"nil",desc:"Tints a section of the Object a certain color if in-bound.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Clear(color.RED)\n\nwindow:TintRegionUnchecked(color.BLUE, .5, 5, 5, 10, 10)",isMethod:!0,metadata:{Unchecked:!0}}),(0,s.jsx)(t.A,{name:"Tint",fullName:"Object:Tint",params:{tint:"Color",factor:"number"},returnType:"nil",desc:"Tints the entire object.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Clear(color.RED)\n\nwindow:Tint(.5, color.BLUE)",isMethod:!0,metadata:{Unchecked:!0}}),(0,s.jsx)(t.A,{name:"Resample",fullName:"Object:Resample",params:{scale:"number?"},returnType:"nil",desc:"Resamples the entire object.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Clear(color.RED)\n\n-- The scale can be an integer:\nwindow:Resample(2)\n\n-- Or even a decimal value:\nwindow:Resample(.5)",isMethod:!0,metadata:{Unchecked:!0}}),(0,s.jsx)(t.A,{name:"Pixel",fullName:"Object:Pixel",params:{x:"number",y:"number",color:"Color"},returnType:"nil",desc:"Draws a pixel at the specified location",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Pixel(5, 5, color.BLUE)",isMethod:!0,metadata:{Unchecked:!0,HotPath:!0}}),(0,s.jsx)(t.A,{name:"PixelIndex",fullName:"Object:PixelIndex",params:{index:"number",color:"Color"},returnType:"nil",desc:"Draws a pixel at the given index in the buffer. Each pixel has a size of 4 bytes.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\n-- 0, 0\nwindow:PixelIndex(0, color.BLUE)\n\n-- 1, 0\nwindow:PixelIndex(4, color.BLUE)",isMethod:!0,metadata:{Unchecked:!0,HotPath:!0}}),(0,s.jsx)(t.A,{name:"Line",fullName:"Object:Line",params:{startX:"number",startY:"number",stopX:"number",stopY:"number",thickness:"number",color:"Color"},returnType:"nil",desc:"Draws a line from point A to point B",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Line(5, 5, WIDTH - 6, HEIGHT - 6, 2, color.BLUE)",isMethod:!0,metadata:{Unchecked:!0,HotPath:!0}}),(0,s.jsx)(t.A,{name:"Rectangle",fullName:"Object:Rectangle",params:{x:"number",y:"number",width:"number",height:"number",fill:"Color?",stroke:"Color?",strokeThickness:"number?",rotation:"number?"},returnType:"nil",desc:"Draws a rectangle",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Rectangle(5, 5, 10, 10, color.BLUE)",isMethod:!0,metadata:{Unchecked:!0,HotPath:!0}}),(0,s.jsx)(t.A,{name:"Polygon",fullName:"Object:Polygon",params:{corners:"{{number}}",fill:"Color",strokeColor:"Color?",strokeThickness:"number?"},returnType:"nil",desc:"Draws a polygon",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal points = {\n    { 0, 0 },\n    { 5, 10 },\n    { 10, 0 },\n}\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Polygon(points, color.BLUE)",isMethod:!0,metadata:{Unchecked:!0,HotPath:!0}}),(0,s.jsx)(t.A,{name:"Triangle",fullName:"Object:Triangle",params:{x1:"number",y1:"number",x2:"number",y2:"number",x3:"number",y3:"number",fill:"Color?",stroke:"Color?",strokeThickness:"number?"},returnType:"nil",desc:"Draws a triangle",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Triangle(0, 0, 5, 10, 10, 0, color.RED)",isMethod:!0,metadata:{Unchecked:!0,HotPath:!0}}),(0,s.jsx)(t.A,{name:"Circle",fullName:"Object:Circle",params:{centerX:"number",centerY:"number",radius:"number",fill:"Color?",stroke:"Color?",strokeThickness:"number?",rotation:{type:"number?",comment:"Only visible at low resolutions."}},returnType:"nil",desc:"Draws a circle",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Cicle(23, 23, 5, color.RED)",isMethod:!0,metadata:{Unchecked:!0,HotPath:!0}}),(0,s.jsx)(t.A,{name:"Buffer",fullName:"Object:Buffer",params:{buffer:"buffer",width:"number",height:"number"},returnType:"nil",desc:"Draws a buffer",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nlocal window2 = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow2:Cicle(23, 23, 5, color.RED)\n\n-- Same as serializing and deserializing the Window\nwindow:Buffer(window2.buffer, WIDTH, HEIGHT)",isMethod:!0,metadata:{Unchecked:!0,HotPath:!0}}),(0,s.jsx)(t.A,{name:"Clear",fullName:"Object:Clear",params:{color:"Color?"},returnType:"nil",desc:"Clears all pixels with the given Color, or a transparent one if not provided.",code:"local OSGL = require(path.to.osgl)\nlocal Window = OSGL.Window\nlocal color = OSGL.color\n\nlocal WIDTH, HEIGHT = 50, 50\n\nlocal image = path.to.imageLabel \nlocal window = Window.from(image, WIDTH, HEIGHT):Unwrap()\nwindow:Clear(color.RED)",isMethod:!0,metadata:{HotPath:!0,Checked:!0}}),(0,s.jsx)("div",{style:{height:"55px"}})]}),(0,s.jsx)(a.A,{}),(0,s.jsx)("div",{className:"grid-background-dark"})]})}}]);
//# sourceMappingURL=935.2250a4f5.chunk.js.map